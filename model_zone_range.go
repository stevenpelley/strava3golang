/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the ZoneRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneRange{}

// ZoneRange struct for ZoneRange
type ZoneRange struct {
	// The minimum value in the range.
	Min *int32 `json:"min,omitempty"`
	// The maximum value in the range.
	Max *int32 `json:"max,omitempty"`
}

// NewZoneRange instantiates a new ZoneRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneRange() *ZoneRange {
	this := ZoneRange{}
	return &this
}

// NewZoneRangeWithDefaults instantiates a new ZoneRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneRangeWithDefaults() *ZoneRange {
	this := ZoneRange{}
	return &this
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *ZoneRange) GetMin() int32 {
	if o == nil || IsNil(o.Min) {
		var ret int32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRange) GetMinOk() (*int32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *ZoneRange) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given int32 and assigns it to the Min field.
func (o *ZoneRange) SetMin(v int32) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *ZoneRange) GetMax() int32 {
	if o == nil || IsNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRange) GetMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *ZoneRange) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *ZoneRange) SetMax(v int32) {
	o.Max = &v
}

func (o ZoneRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	return toSerialize, nil
}

type NullableZoneRange struct {
	value *ZoneRange
	isSet bool
}

func (v NullableZoneRange) Get() *ZoneRange {
	return v.value
}

func (v *NullableZoneRange) Set(val *ZoneRange) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneRange) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneRange(val *ZoneRange) *NullableZoneRange {
	return &NullableZoneRange{value: val, isSet: true}
}

func (v NullableZoneRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


