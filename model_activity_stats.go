/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the ActivityStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityStats{}

// ActivityStats A set of rolled-up statistics and totals for an athlete
type ActivityStats struct {
	// The longest distance ridden by the athlete.
	BiggestRideDistance *float64 `json:"biggest_ride_distance,omitempty"`
	// The highest climb ridden by the athlete.
	BiggestClimbElevationGain *float64 `json:"biggest_climb_elevation_gain,omitempty"`
	RecentRideTotals *ActivityTotal `json:"recent_ride_totals,omitempty"`
	RecentRunTotals *ActivityTotal `json:"recent_run_totals,omitempty"`
	RecentSwimTotals *ActivityTotal `json:"recent_swim_totals,omitempty"`
	YtdRideTotals *ActivityTotal `json:"ytd_ride_totals,omitempty"`
	YtdRunTotals *ActivityTotal `json:"ytd_run_totals,omitempty"`
	YtdSwimTotals *ActivityTotal `json:"ytd_swim_totals,omitempty"`
	AllRideTotals *ActivityTotal `json:"all_ride_totals,omitempty"`
	AllRunTotals *ActivityTotal `json:"all_run_totals,omitempty"`
	AllSwimTotals *ActivityTotal `json:"all_swim_totals,omitempty"`
}

// NewActivityStats instantiates a new ActivityStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityStats() *ActivityStats {
	this := ActivityStats{}
	return &this
}

// NewActivityStatsWithDefaults instantiates a new ActivityStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityStatsWithDefaults() *ActivityStats {
	this := ActivityStats{}
	return &this
}

// GetBiggestRideDistance returns the BiggestRideDistance field value if set, zero value otherwise.
func (o *ActivityStats) GetBiggestRideDistance() float64 {
	if o == nil || IsNil(o.BiggestRideDistance) {
		var ret float64
		return ret
	}
	return *o.BiggestRideDistance
}

// GetBiggestRideDistanceOk returns a tuple with the BiggestRideDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetBiggestRideDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.BiggestRideDistance) {
		return nil, false
	}
	return o.BiggestRideDistance, true
}

// HasBiggestRideDistance returns a boolean if a field has been set.
func (o *ActivityStats) HasBiggestRideDistance() bool {
	if o != nil && !IsNil(o.BiggestRideDistance) {
		return true
	}

	return false
}

// SetBiggestRideDistance gets a reference to the given float64 and assigns it to the BiggestRideDistance field.
func (o *ActivityStats) SetBiggestRideDistance(v float64) {
	o.BiggestRideDistance = &v
}

// GetBiggestClimbElevationGain returns the BiggestClimbElevationGain field value if set, zero value otherwise.
func (o *ActivityStats) GetBiggestClimbElevationGain() float64 {
	if o == nil || IsNil(o.BiggestClimbElevationGain) {
		var ret float64
		return ret
	}
	return *o.BiggestClimbElevationGain
}

// GetBiggestClimbElevationGainOk returns a tuple with the BiggestClimbElevationGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetBiggestClimbElevationGainOk() (*float64, bool) {
	if o == nil || IsNil(o.BiggestClimbElevationGain) {
		return nil, false
	}
	return o.BiggestClimbElevationGain, true
}

// HasBiggestClimbElevationGain returns a boolean if a field has been set.
func (o *ActivityStats) HasBiggestClimbElevationGain() bool {
	if o != nil && !IsNil(o.BiggestClimbElevationGain) {
		return true
	}

	return false
}

// SetBiggestClimbElevationGain gets a reference to the given float64 and assigns it to the BiggestClimbElevationGain field.
func (o *ActivityStats) SetBiggestClimbElevationGain(v float64) {
	o.BiggestClimbElevationGain = &v
}

// GetRecentRideTotals returns the RecentRideTotals field value if set, zero value otherwise.
func (o *ActivityStats) GetRecentRideTotals() ActivityTotal {
	if o == nil || IsNil(o.RecentRideTotals) {
		var ret ActivityTotal
		return ret
	}
	return *o.RecentRideTotals
}

// GetRecentRideTotalsOk returns a tuple with the RecentRideTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetRecentRideTotalsOk() (*ActivityTotal, bool) {
	if o == nil || IsNil(o.RecentRideTotals) {
		return nil, false
	}
	return o.RecentRideTotals, true
}

// HasRecentRideTotals returns a boolean if a field has been set.
func (o *ActivityStats) HasRecentRideTotals() bool {
	if o != nil && !IsNil(o.RecentRideTotals) {
		return true
	}

	return false
}

// SetRecentRideTotals gets a reference to the given ActivityTotal and assigns it to the RecentRideTotals field.
func (o *ActivityStats) SetRecentRideTotals(v ActivityTotal) {
	o.RecentRideTotals = &v
}

// GetRecentRunTotals returns the RecentRunTotals field value if set, zero value otherwise.
func (o *ActivityStats) GetRecentRunTotals() ActivityTotal {
	if o == nil || IsNil(o.RecentRunTotals) {
		var ret ActivityTotal
		return ret
	}
	return *o.RecentRunTotals
}

// GetRecentRunTotalsOk returns a tuple with the RecentRunTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetRecentRunTotalsOk() (*ActivityTotal, bool) {
	if o == nil || IsNil(o.RecentRunTotals) {
		return nil, false
	}
	return o.RecentRunTotals, true
}

// HasRecentRunTotals returns a boolean if a field has been set.
func (o *ActivityStats) HasRecentRunTotals() bool {
	if o != nil && !IsNil(o.RecentRunTotals) {
		return true
	}

	return false
}

// SetRecentRunTotals gets a reference to the given ActivityTotal and assigns it to the RecentRunTotals field.
func (o *ActivityStats) SetRecentRunTotals(v ActivityTotal) {
	o.RecentRunTotals = &v
}

// GetRecentSwimTotals returns the RecentSwimTotals field value if set, zero value otherwise.
func (o *ActivityStats) GetRecentSwimTotals() ActivityTotal {
	if o == nil || IsNil(o.RecentSwimTotals) {
		var ret ActivityTotal
		return ret
	}
	return *o.RecentSwimTotals
}

// GetRecentSwimTotalsOk returns a tuple with the RecentSwimTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetRecentSwimTotalsOk() (*ActivityTotal, bool) {
	if o == nil || IsNil(o.RecentSwimTotals) {
		return nil, false
	}
	return o.RecentSwimTotals, true
}

// HasRecentSwimTotals returns a boolean if a field has been set.
func (o *ActivityStats) HasRecentSwimTotals() bool {
	if o != nil && !IsNil(o.RecentSwimTotals) {
		return true
	}

	return false
}

// SetRecentSwimTotals gets a reference to the given ActivityTotal and assigns it to the RecentSwimTotals field.
func (o *ActivityStats) SetRecentSwimTotals(v ActivityTotal) {
	o.RecentSwimTotals = &v
}

// GetYtdRideTotals returns the YtdRideTotals field value if set, zero value otherwise.
func (o *ActivityStats) GetYtdRideTotals() ActivityTotal {
	if o == nil || IsNil(o.YtdRideTotals) {
		var ret ActivityTotal
		return ret
	}
	return *o.YtdRideTotals
}

// GetYtdRideTotalsOk returns a tuple with the YtdRideTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetYtdRideTotalsOk() (*ActivityTotal, bool) {
	if o == nil || IsNil(o.YtdRideTotals) {
		return nil, false
	}
	return o.YtdRideTotals, true
}

// HasYtdRideTotals returns a boolean if a field has been set.
func (o *ActivityStats) HasYtdRideTotals() bool {
	if o != nil && !IsNil(o.YtdRideTotals) {
		return true
	}

	return false
}

// SetYtdRideTotals gets a reference to the given ActivityTotal and assigns it to the YtdRideTotals field.
func (o *ActivityStats) SetYtdRideTotals(v ActivityTotal) {
	o.YtdRideTotals = &v
}

// GetYtdRunTotals returns the YtdRunTotals field value if set, zero value otherwise.
func (o *ActivityStats) GetYtdRunTotals() ActivityTotal {
	if o == nil || IsNil(o.YtdRunTotals) {
		var ret ActivityTotal
		return ret
	}
	return *o.YtdRunTotals
}

// GetYtdRunTotalsOk returns a tuple with the YtdRunTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetYtdRunTotalsOk() (*ActivityTotal, bool) {
	if o == nil || IsNil(o.YtdRunTotals) {
		return nil, false
	}
	return o.YtdRunTotals, true
}

// HasYtdRunTotals returns a boolean if a field has been set.
func (o *ActivityStats) HasYtdRunTotals() bool {
	if o != nil && !IsNil(o.YtdRunTotals) {
		return true
	}

	return false
}

// SetYtdRunTotals gets a reference to the given ActivityTotal and assigns it to the YtdRunTotals field.
func (o *ActivityStats) SetYtdRunTotals(v ActivityTotal) {
	o.YtdRunTotals = &v
}

// GetYtdSwimTotals returns the YtdSwimTotals field value if set, zero value otherwise.
func (o *ActivityStats) GetYtdSwimTotals() ActivityTotal {
	if o == nil || IsNil(o.YtdSwimTotals) {
		var ret ActivityTotal
		return ret
	}
	return *o.YtdSwimTotals
}

// GetYtdSwimTotalsOk returns a tuple with the YtdSwimTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetYtdSwimTotalsOk() (*ActivityTotal, bool) {
	if o == nil || IsNil(o.YtdSwimTotals) {
		return nil, false
	}
	return o.YtdSwimTotals, true
}

// HasYtdSwimTotals returns a boolean if a field has been set.
func (o *ActivityStats) HasYtdSwimTotals() bool {
	if o != nil && !IsNil(o.YtdSwimTotals) {
		return true
	}

	return false
}

// SetYtdSwimTotals gets a reference to the given ActivityTotal and assigns it to the YtdSwimTotals field.
func (o *ActivityStats) SetYtdSwimTotals(v ActivityTotal) {
	o.YtdSwimTotals = &v
}

// GetAllRideTotals returns the AllRideTotals field value if set, zero value otherwise.
func (o *ActivityStats) GetAllRideTotals() ActivityTotal {
	if o == nil || IsNil(o.AllRideTotals) {
		var ret ActivityTotal
		return ret
	}
	return *o.AllRideTotals
}

// GetAllRideTotalsOk returns a tuple with the AllRideTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetAllRideTotalsOk() (*ActivityTotal, bool) {
	if o == nil || IsNil(o.AllRideTotals) {
		return nil, false
	}
	return o.AllRideTotals, true
}

// HasAllRideTotals returns a boolean if a field has been set.
func (o *ActivityStats) HasAllRideTotals() bool {
	if o != nil && !IsNil(o.AllRideTotals) {
		return true
	}

	return false
}

// SetAllRideTotals gets a reference to the given ActivityTotal and assigns it to the AllRideTotals field.
func (o *ActivityStats) SetAllRideTotals(v ActivityTotal) {
	o.AllRideTotals = &v
}

// GetAllRunTotals returns the AllRunTotals field value if set, zero value otherwise.
func (o *ActivityStats) GetAllRunTotals() ActivityTotal {
	if o == nil || IsNil(o.AllRunTotals) {
		var ret ActivityTotal
		return ret
	}
	return *o.AllRunTotals
}

// GetAllRunTotalsOk returns a tuple with the AllRunTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetAllRunTotalsOk() (*ActivityTotal, bool) {
	if o == nil || IsNil(o.AllRunTotals) {
		return nil, false
	}
	return o.AllRunTotals, true
}

// HasAllRunTotals returns a boolean if a field has been set.
func (o *ActivityStats) HasAllRunTotals() bool {
	if o != nil && !IsNil(o.AllRunTotals) {
		return true
	}

	return false
}

// SetAllRunTotals gets a reference to the given ActivityTotal and assigns it to the AllRunTotals field.
func (o *ActivityStats) SetAllRunTotals(v ActivityTotal) {
	o.AllRunTotals = &v
}

// GetAllSwimTotals returns the AllSwimTotals field value if set, zero value otherwise.
func (o *ActivityStats) GetAllSwimTotals() ActivityTotal {
	if o == nil || IsNil(o.AllSwimTotals) {
		var ret ActivityTotal
		return ret
	}
	return *o.AllSwimTotals
}

// GetAllSwimTotalsOk returns a tuple with the AllSwimTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStats) GetAllSwimTotalsOk() (*ActivityTotal, bool) {
	if o == nil || IsNil(o.AllSwimTotals) {
		return nil, false
	}
	return o.AllSwimTotals, true
}

// HasAllSwimTotals returns a boolean if a field has been set.
func (o *ActivityStats) HasAllSwimTotals() bool {
	if o != nil && !IsNil(o.AllSwimTotals) {
		return true
	}

	return false
}

// SetAllSwimTotals gets a reference to the given ActivityTotal and assigns it to the AllSwimTotals field.
func (o *ActivityStats) SetAllSwimTotals(v ActivityTotal) {
	o.AllSwimTotals = &v
}

func (o ActivityStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BiggestRideDistance) {
		toSerialize["biggest_ride_distance"] = o.BiggestRideDistance
	}
	if !IsNil(o.BiggestClimbElevationGain) {
		toSerialize["biggest_climb_elevation_gain"] = o.BiggestClimbElevationGain
	}
	if !IsNil(o.RecentRideTotals) {
		toSerialize["recent_ride_totals"] = o.RecentRideTotals
	}
	if !IsNil(o.RecentRunTotals) {
		toSerialize["recent_run_totals"] = o.RecentRunTotals
	}
	if !IsNil(o.RecentSwimTotals) {
		toSerialize["recent_swim_totals"] = o.RecentSwimTotals
	}
	if !IsNil(o.YtdRideTotals) {
		toSerialize["ytd_ride_totals"] = o.YtdRideTotals
	}
	if !IsNil(o.YtdRunTotals) {
		toSerialize["ytd_run_totals"] = o.YtdRunTotals
	}
	if !IsNil(o.YtdSwimTotals) {
		toSerialize["ytd_swim_totals"] = o.YtdSwimTotals
	}
	if !IsNil(o.AllRideTotals) {
		toSerialize["all_ride_totals"] = o.AllRideTotals
	}
	if !IsNil(o.AllRunTotals) {
		toSerialize["all_run_totals"] = o.AllRunTotals
	}
	if !IsNil(o.AllSwimTotals) {
		toSerialize["all_swim_totals"] = o.AllSwimTotals
	}
	return toSerialize, nil
}

type NullableActivityStats struct {
	value *ActivityStats
	isSet bool
}

func (v NullableActivityStats) Get() *ActivityStats {
	return v.value
}

func (v *NullableActivityStats) Set(val *ActivityStats) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityStats) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityStats(val *ActivityStats) *NullableActivityStats {
	return &NullableActivityStats{value: val, isSet: true}
}

func (v NullableActivityStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


