/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the ExplorerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExplorerResponse{}

// ExplorerResponse struct for ExplorerResponse
type ExplorerResponse struct {
	// The set of segments matching an explorer request
	Segments []ExplorerSegment `json:"segments,omitempty"`
}

// NewExplorerResponse instantiates a new ExplorerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExplorerResponse() *ExplorerResponse {
	this := ExplorerResponse{}
	return &this
}

// NewExplorerResponseWithDefaults instantiates a new ExplorerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExplorerResponseWithDefaults() *ExplorerResponse {
	this := ExplorerResponse{}
	return &this
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *ExplorerResponse) GetSegments() []ExplorerSegment {
	if o == nil || IsNil(o.Segments) {
		var ret []ExplorerSegment
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplorerResponse) GetSegmentsOk() ([]ExplorerSegment, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *ExplorerResponse) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []ExplorerSegment and assigns it to the Segments field.
func (o *ExplorerResponse) SetSegments(v []ExplorerSegment) {
	o.Segments = v
}

func (o ExplorerResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExplorerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	return toSerialize, nil
}

type NullableExplorerResponse struct {
	value *ExplorerResponse
	isSet bool
}

func (v NullableExplorerResponse) Get() *ExplorerResponse {
	return v.value
}

func (v *NullableExplorerResponse) Set(val *ExplorerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExplorerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExplorerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExplorerResponse(val *ExplorerResponse) *NullableExplorerResponse {
	return &NullableExplorerResponse{value: val, isSet: true}
}

func (v NullableExplorerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExplorerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


