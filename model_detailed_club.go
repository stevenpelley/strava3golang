/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the DetailedClub type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailedClub{}

// DetailedClub struct for DetailedClub
type DetailedClub struct {
	// The club's unique identifier.
	Id *int64 `json:"id,omitempty"`
	// Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
	ResourceState *int32 `json:"resource_state,omitempty"`
	// The club's name.
	Name *string `json:"name,omitempty"`
	// URL to a 60x60 pixel profile picture.
	ProfileMedium *string `json:"profile_medium,omitempty"`
	// URL to a ~1185x580 pixel cover photo.
	CoverPhoto *string `json:"cover_photo,omitempty"`
	// URL to a ~360x176  pixel cover photo.
	CoverPhotoSmall *string `json:"cover_photo_small,omitempty"`
	// Deprecated. Prefer to use activity_types.
	SportType *string `json:"sport_type,omitempty"`
	// The activity types that count for a club. This takes precedence over sport_type.
	ActivityTypes []ActivityType `json:"activity_types,omitempty"`
	// The club's city.
	City *string `json:"city,omitempty"`
	// The club's state or geographical region.
	State *string `json:"state,omitempty"`
	// The club's country.
	Country *string `json:"country,omitempty"`
	// Whether the club is private.
	Private *bool `json:"private,omitempty"`
	// The club's member count.
	MemberCount *int32 `json:"member_count,omitempty"`
	// Whether the club is featured or not.
	Featured *bool `json:"featured,omitempty"`
	// Whether the club is verified or not.
	Verified *bool `json:"verified,omitempty"`
	// The club's vanity URL.
	Url *string `json:"url,omitempty"`
	// The membership status of the logged-in athlete.
	Membership *string `json:"membership,omitempty"`
	// Whether the currently logged-in athlete is an administrator of this club.
	Admin *bool `json:"admin,omitempty"`
	// Whether the currently logged-in athlete is the owner of this club.
	Owner *bool `json:"owner,omitempty"`
	// The number of athletes in the club that the logged-in athlete follows.
	FollowingCount *int32 `json:"following_count,omitempty"`
}

// NewDetailedClub instantiates a new DetailedClub object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedClub() *DetailedClub {
	this := DetailedClub{}
	return &this
}

// NewDetailedClubWithDefaults instantiates a new DetailedClub object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedClubWithDefaults() *DetailedClub {
	this := DetailedClub{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DetailedClub) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DetailedClub) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DetailedClub) SetId(v int64) {
	o.Id = &v
}

// GetResourceState returns the ResourceState field value if set, zero value otherwise.
func (o *DetailedClub) GetResourceState() int32 {
	if o == nil || IsNil(o.ResourceState) {
		var ret int32
		return ret
	}
	return *o.ResourceState
}

// GetResourceStateOk returns a tuple with the ResourceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetResourceStateOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourceState) {
		return nil, false
	}
	return o.ResourceState, true
}

// HasResourceState returns a boolean if a field has been set.
func (o *DetailedClub) HasResourceState() bool {
	if o != nil && !IsNil(o.ResourceState) {
		return true
	}

	return false
}

// SetResourceState gets a reference to the given int32 and assigns it to the ResourceState field.
func (o *DetailedClub) SetResourceState(v int32) {
	o.ResourceState = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DetailedClub) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DetailedClub) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DetailedClub) SetName(v string) {
	o.Name = &v
}

// GetProfileMedium returns the ProfileMedium field value if set, zero value otherwise.
func (o *DetailedClub) GetProfileMedium() string {
	if o == nil || IsNil(o.ProfileMedium) {
		var ret string
		return ret
	}
	return *o.ProfileMedium
}

// GetProfileMediumOk returns a tuple with the ProfileMedium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetProfileMediumOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileMedium) {
		return nil, false
	}
	return o.ProfileMedium, true
}

// HasProfileMedium returns a boolean if a field has been set.
func (o *DetailedClub) HasProfileMedium() bool {
	if o != nil && !IsNil(o.ProfileMedium) {
		return true
	}

	return false
}

// SetProfileMedium gets a reference to the given string and assigns it to the ProfileMedium field.
func (o *DetailedClub) SetProfileMedium(v string) {
	o.ProfileMedium = &v
}

// GetCoverPhoto returns the CoverPhoto field value if set, zero value otherwise.
func (o *DetailedClub) GetCoverPhoto() string {
	if o == nil || IsNil(o.CoverPhoto) {
		var ret string
		return ret
	}
	return *o.CoverPhoto
}

// GetCoverPhotoOk returns a tuple with the CoverPhoto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetCoverPhotoOk() (*string, bool) {
	if o == nil || IsNil(o.CoverPhoto) {
		return nil, false
	}
	return o.CoverPhoto, true
}

// HasCoverPhoto returns a boolean if a field has been set.
func (o *DetailedClub) HasCoverPhoto() bool {
	if o != nil && !IsNil(o.CoverPhoto) {
		return true
	}

	return false
}

// SetCoverPhoto gets a reference to the given string and assigns it to the CoverPhoto field.
func (o *DetailedClub) SetCoverPhoto(v string) {
	o.CoverPhoto = &v
}

// GetCoverPhotoSmall returns the CoverPhotoSmall field value if set, zero value otherwise.
func (o *DetailedClub) GetCoverPhotoSmall() string {
	if o == nil || IsNil(o.CoverPhotoSmall) {
		var ret string
		return ret
	}
	return *o.CoverPhotoSmall
}

// GetCoverPhotoSmallOk returns a tuple with the CoverPhotoSmall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetCoverPhotoSmallOk() (*string, bool) {
	if o == nil || IsNil(o.CoverPhotoSmall) {
		return nil, false
	}
	return o.CoverPhotoSmall, true
}

// HasCoverPhotoSmall returns a boolean if a field has been set.
func (o *DetailedClub) HasCoverPhotoSmall() bool {
	if o != nil && !IsNil(o.CoverPhotoSmall) {
		return true
	}

	return false
}

// SetCoverPhotoSmall gets a reference to the given string and assigns it to the CoverPhotoSmall field.
func (o *DetailedClub) SetCoverPhotoSmall(v string) {
	o.CoverPhotoSmall = &v
}

// GetSportType returns the SportType field value if set, zero value otherwise.
func (o *DetailedClub) GetSportType() string {
	if o == nil || IsNil(o.SportType) {
		var ret string
		return ret
	}
	return *o.SportType
}

// GetSportTypeOk returns a tuple with the SportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetSportTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SportType) {
		return nil, false
	}
	return o.SportType, true
}

// HasSportType returns a boolean if a field has been set.
func (o *DetailedClub) HasSportType() bool {
	if o != nil && !IsNil(o.SportType) {
		return true
	}

	return false
}

// SetSportType gets a reference to the given string and assigns it to the SportType field.
func (o *DetailedClub) SetSportType(v string) {
	o.SportType = &v
}

// GetActivityTypes returns the ActivityTypes field value if set, zero value otherwise.
func (o *DetailedClub) GetActivityTypes() []ActivityType {
	if o == nil || IsNil(o.ActivityTypes) {
		var ret []ActivityType
		return ret
	}
	return o.ActivityTypes
}

// GetActivityTypesOk returns a tuple with the ActivityTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetActivityTypesOk() ([]ActivityType, bool) {
	if o == nil || IsNil(o.ActivityTypes) {
		return nil, false
	}
	return o.ActivityTypes, true
}

// HasActivityTypes returns a boolean if a field has been set.
func (o *DetailedClub) HasActivityTypes() bool {
	if o != nil && !IsNil(o.ActivityTypes) {
		return true
	}

	return false
}

// SetActivityTypes gets a reference to the given []ActivityType and assigns it to the ActivityTypes field.
func (o *DetailedClub) SetActivityTypes(v []ActivityType) {
	o.ActivityTypes = v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *DetailedClub) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *DetailedClub) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *DetailedClub) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DetailedClub) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DetailedClub) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DetailedClub) SetState(v string) {
	o.State = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *DetailedClub) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *DetailedClub) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *DetailedClub) SetCountry(v string) {
	o.Country = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *DetailedClub) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *DetailedClub) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *DetailedClub) SetPrivate(v bool) {
	o.Private = &v
}

// GetMemberCount returns the MemberCount field value if set, zero value otherwise.
func (o *DetailedClub) GetMemberCount() int32 {
	if o == nil || IsNil(o.MemberCount) {
		var ret int32
		return ret
	}
	return *o.MemberCount
}

// GetMemberCountOk returns a tuple with the MemberCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetMemberCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MemberCount) {
		return nil, false
	}
	return o.MemberCount, true
}

// HasMemberCount returns a boolean if a field has been set.
func (o *DetailedClub) HasMemberCount() bool {
	if o != nil && !IsNil(o.MemberCount) {
		return true
	}

	return false
}

// SetMemberCount gets a reference to the given int32 and assigns it to the MemberCount field.
func (o *DetailedClub) SetMemberCount(v int32) {
	o.MemberCount = &v
}

// GetFeatured returns the Featured field value if set, zero value otherwise.
func (o *DetailedClub) GetFeatured() bool {
	if o == nil || IsNil(o.Featured) {
		var ret bool
		return ret
	}
	return *o.Featured
}

// GetFeaturedOk returns a tuple with the Featured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetFeaturedOk() (*bool, bool) {
	if o == nil || IsNil(o.Featured) {
		return nil, false
	}
	return o.Featured, true
}

// HasFeatured returns a boolean if a field has been set.
func (o *DetailedClub) HasFeatured() bool {
	if o != nil && !IsNil(o.Featured) {
		return true
	}

	return false
}

// SetFeatured gets a reference to the given bool and assigns it to the Featured field.
func (o *DetailedClub) SetFeatured(v bool) {
	o.Featured = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *DetailedClub) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *DetailedClub) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *DetailedClub) SetVerified(v bool) {
	o.Verified = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DetailedClub) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DetailedClub) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DetailedClub) SetUrl(v string) {
	o.Url = &v
}

// GetMembership returns the Membership field value if set, zero value otherwise.
func (o *DetailedClub) GetMembership() string {
	if o == nil || IsNil(o.Membership) {
		var ret string
		return ret
	}
	return *o.Membership
}

// GetMembershipOk returns a tuple with the Membership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetMembershipOk() (*string, bool) {
	if o == nil || IsNil(o.Membership) {
		return nil, false
	}
	return o.Membership, true
}

// HasMembership returns a boolean if a field has been set.
func (o *DetailedClub) HasMembership() bool {
	if o != nil && !IsNil(o.Membership) {
		return true
	}

	return false
}

// SetMembership gets a reference to the given string and assigns it to the Membership field.
func (o *DetailedClub) SetMembership(v string) {
	o.Membership = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *DetailedClub) GetAdmin() bool {
	if o == nil || IsNil(o.Admin) {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *DetailedClub) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *DetailedClub) SetAdmin(v bool) {
	o.Admin = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DetailedClub) GetOwner() bool {
	if o == nil || IsNil(o.Owner) {
		var ret bool
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DetailedClub) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given bool and assigns it to the Owner field.
func (o *DetailedClub) SetOwner(v bool) {
	o.Owner = &v
}

// GetFollowingCount returns the FollowingCount field value if set, zero value otherwise.
func (o *DetailedClub) GetFollowingCount() int32 {
	if o == nil || IsNil(o.FollowingCount) {
		var ret int32
		return ret
	}
	return *o.FollowingCount
}

// GetFollowingCountOk returns a tuple with the FollowingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClub) GetFollowingCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FollowingCount) {
		return nil, false
	}
	return o.FollowingCount, true
}

// HasFollowingCount returns a boolean if a field has been set.
func (o *DetailedClub) HasFollowingCount() bool {
	if o != nil && !IsNil(o.FollowingCount) {
		return true
	}

	return false
}

// SetFollowingCount gets a reference to the given int32 and assigns it to the FollowingCount field.
func (o *DetailedClub) SetFollowingCount(v int32) {
	o.FollowingCount = &v
}

func (o DetailedClub) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailedClub) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ResourceState) {
		toSerialize["resource_state"] = o.ResourceState
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProfileMedium) {
		toSerialize["profile_medium"] = o.ProfileMedium
	}
	if !IsNil(o.CoverPhoto) {
		toSerialize["cover_photo"] = o.CoverPhoto
	}
	if !IsNil(o.CoverPhotoSmall) {
		toSerialize["cover_photo_small"] = o.CoverPhotoSmall
	}
	if !IsNil(o.SportType) {
		toSerialize["sport_type"] = o.SportType
	}
	if !IsNil(o.ActivityTypes) {
		toSerialize["activity_types"] = o.ActivityTypes
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.MemberCount) {
		toSerialize["member_count"] = o.MemberCount
	}
	if !IsNil(o.Featured) {
		toSerialize["featured"] = o.Featured
	}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Membership) {
		toSerialize["membership"] = o.Membership
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.FollowingCount) {
		toSerialize["following_count"] = o.FollowingCount
	}
	return toSerialize, nil
}

type NullableDetailedClub struct {
	value *DetailedClub
	isSet bool
}

func (v NullableDetailedClub) Get() *DetailedClub {
	return v.value
}

func (v *NullableDetailedClub) Set(val *DetailedClub) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedClub) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedClub) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedClub(val *DetailedClub) *NullableDetailedClub {
	return &NullableDetailedClub{value: val, isSet: true}
}

func (v NullableDetailedClub) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedClub) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


