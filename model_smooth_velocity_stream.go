/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the SmoothVelocityStream type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmoothVelocityStream{}

// SmoothVelocityStream struct for SmoothVelocityStream
type SmoothVelocityStream struct {
	// The number of data points in this stream
	OriginalSize *int32 `json:"original_size,omitempty"`
	// The level of detail (sampling) in which this stream was returned
	Resolution *string `json:"resolution,omitempty"`
	// The base series used in the case the stream was downsampled
	SeriesType *string `json:"series_type,omitempty"`
	// The sequence of velocity values for this stream, in meters per second
	Data []float32 `json:"data,omitempty"`
}

// NewSmoothVelocityStream instantiates a new SmoothVelocityStream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmoothVelocityStream() *SmoothVelocityStream {
	this := SmoothVelocityStream{}
	return &this
}

// NewSmoothVelocityStreamWithDefaults instantiates a new SmoothVelocityStream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmoothVelocityStreamWithDefaults() *SmoothVelocityStream {
	this := SmoothVelocityStream{}
	return &this
}

// GetOriginalSize returns the OriginalSize field value if set, zero value otherwise.
func (o *SmoothVelocityStream) GetOriginalSize() int32 {
	if o == nil || IsNil(o.OriginalSize) {
		var ret int32
		return ret
	}
	return *o.OriginalSize
}

// GetOriginalSizeOk returns a tuple with the OriginalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmoothVelocityStream) GetOriginalSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginalSize) {
		return nil, false
	}
	return o.OriginalSize, true
}

// HasOriginalSize returns a boolean if a field has been set.
func (o *SmoothVelocityStream) HasOriginalSize() bool {
	if o != nil && !IsNil(o.OriginalSize) {
		return true
	}

	return false
}

// SetOriginalSize gets a reference to the given int32 and assigns it to the OriginalSize field.
func (o *SmoothVelocityStream) SetOriginalSize(v int32) {
	o.OriginalSize = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *SmoothVelocityStream) GetResolution() string {
	if o == nil || IsNil(o.Resolution) {
		var ret string
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmoothVelocityStream) GetResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.Resolution) {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *SmoothVelocityStream) HasResolution() bool {
	if o != nil && !IsNil(o.Resolution) {
		return true
	}

	return false
}

// SetResolution gets a reference to the given string and assigns it to the Resolution field.
func (o *SmoothVelocityStream) SetResolution(v string) {
	o.Resolution = &v
}

// GetSeriesType returns the SeriesType field value if set, zero value otherwise.
func (o *SmoothVelocityStream) GetSeriesType() string {
	if o == nil || IsNil(o.SeriesType) {
		var ret string
		return ret
	}
	return *o.SeriesType
}

// GetSeriesTypeOk returns a tuple with the SeriesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmoothVelocityStream) GetSeriesTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesType) {
		return nil, false
	}
	return o.SeriesType, true
}

// HasSeriesType returns a boolean if a field has been set.
func (o *SmoothVelocityStream) HasSeriesType() bool {
	if o != nil && !IsNil(o.SeriesType) {
		return true
	}

	return false
}

// SetSeriesType gets a reference to the given string and assigns it to the SeriesType field.
func (o *SmoothVelocityStream) SetSeriesType(v string) {
	o.SeriesType = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SmoothVelocityStream) GetData() []float32 {
	if o == nil || IsNil(o.Data) {
		var ret []float32
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmoothVelocityStream) GetDataOk() ([]float32, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SmoothVelocityStream) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []float32 and assigns it to the Data field.
func (o *SmoothVelocityStream) SetData(v []float32) {
	o.Data = v
}

func (o SmoothVelocityStream) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmoothVelocityStream) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginalSize) {
		toSerialize["original_size"] = o.OriginalSize
	}
	if !IsNil(o.Resolution) {
		toSerialize["resolution"] = o.Resolution
	}
	if !IsNil(o.SeriesType) {
		toSerialize["series_type"] = o.SeriesType
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableSmoothVelocityStream struct {
	value *SmoothVelocityStream
	isSet bool
}

func (v NullableSmoothVelocityStream) Get() *SmoothVelocityStream {
	return v.value
}

func (v *NullableSmoothVelocityStream) Set(val *SmoothVelocityStream) {
	v.value = val
	v.isSet = true
}

func (v NullableSmoothVelocityStream) IsSet() bool {
	return v.isSet
}

func (v *NullableSmoothVelocityStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmoothVelocityStream(val *SmoothVelocityStream) *NullableSmoothVelocityStream {
	return &NullableSmoothVelocityStream{value: val, isSet: true}
}

func (v NullableSmoothVelocityStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmoothVelocityStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


