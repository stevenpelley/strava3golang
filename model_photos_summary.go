/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the PhotosSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhotosSummary{}

// PhotosSummary struct for PhotosSummary
type PhotosSummary struct {
	// The number of photos
	Count *int32 `json:"count,omitempty"`
	Primary *PhotosSummaryPrimary `json:"primary,omitempty"`
}

// NewPhotosSummary instantiates a new PhotosSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhotosSummary() *PhotosSummary {
	this := PhotosSummary{}
	return &this
}

// NewPhotosSummaryWithDefaults instantiates a new PhotosSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhotosSummaryWithDefaults() *PhotosSummary {
	this := PhotosSummary{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PhotosSummary) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhotosSummary) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PhotosSummary) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *PhotosSummary) SetCount(v int32) {
	o.Count = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *PhotosSummary) GetPrimary() PhotosSummaryPrimary {
	if o == nil || IsNil(o.Primary) {
		var ret PhotosSummaryPrimary
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhotosSummary) GetPrimaryOk() (*PhotosSummaryPrimary, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *PhotosSummary) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given PhotosSummaryPrimary and assigns it to the Primary field.
func (o *PhotosSummary) SetPrimary(v PhotosSummaryPrimary) {
	o.Primary = &v
}

func (o PhotosSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhotosSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	return toSerialize, nil
}

type NullablePhotosSummary struct {
	value *PhotosSummary
	isSet bool
}

func (v NullablePhotosSummary) Get() *PhotosSummary {
	return v.value
}

func (v *NullablePhotosSummary) Set(val *PhotosSummary) {
	v.value = val
	v.isSet = true
}

func (v NullablePhotosSummary) IsSet() bool {
	return v.isSet
}

func (v *NullablePhotosSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhotosSummary(val *PhotosSummary) *NullablePhotosSummary {
	return &NullablePhotosSummary{value: val, isSet: true}
}

func (v NullablePhotosSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhotosSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


