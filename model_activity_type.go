/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
	"fmt"
)

// ActivityType An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide)
type ActivityType string

// List of ActivityType
const (
	ACTIVITYTYPE_ALPINE_SKI ActivityType = "AlpineSki"
	ACTIVITYTYPE_BACKCOUNTRY_SKI ActivityType = "BackcountrySki"
	ACTIVITYTYPE_CANOEING ActivityType = "Canoeing"
	ACTIVITYTYPE_CROSSFIT ActivityType = "Crossfit"
	ACTIVITYTYPE_E_BIKE_RIDE ActivityType = "EBikeRide"
	ACTIVITYTYPE_ELLIPTICAL ActivityType = "Elliptical"
	ACTIVITYTYPE_GOLF ActivityType = "Golf"
	ACTIVITYTYPE_HANDCYCLE ActivityType = "Handcycle"
	ACTIVITYTYPE_HIKE ActivityType = "Hike"
	ACTIVITYTYPE_ICE_SKATE ActivityType = "IceSkate"
	ACTIVITYTYPE_INLINE_SKATE ActivityType = "InlineSkate"
	ACTIVITYTYPE_KAYAKING ActivityType = "Kayaking"
	ACTIVITYTYPE_KITESURF ActivityType = "Kitesurf"
	ACTIVITYTYPE_NORDIC_SKI ActivityType = "NordicSki"
	ACTIVITYTYPE_RIDE ActivityType = "Ride"
	ACTIVITYTYPE_ROCK_CLIMBING ActivityType = "RockClimbing"
	ACTIVITYTYPE_ROLLER_SKI ActivityType = "RollerSki"
	ACTIVITYTYPE_ROWING ActivityType = "Rowing"
	ACTIVITYTYPE_RUN ActivityType = "Run"
	ACTIVITYTYPE_SAIL ActivityType = "Sail"
	ACTIVITYTYPE_SKATEBOARD ActivityType = "Skateboard"
	ACTIVITYTYPE_SNOWBOARD ActivityType = "Snowboard"
	ACTIVITYTYPE_SNOWSHOE ActivityType = "Snowshoe"
	ACTIVITYTYPE_SOCCER ActivityType = "Soccer"
	ACTIVITYTYPE_STAIR_STEPPER ActivityType = "StairStepper"
	ACTIVITYTYPE_STAND_UP_PADDLING ActivityType = "StandUpPaddling"
	ACTIVITYTYPE_SURFING ActivityType = "Surfing"
	ACTIVITYTYPE_SWIM ActivityType = "Swim"
	ACTIVITYTYPE_VELOMOBILE ActivityType = "Velomobile"
	ACTIVITYTYPE_VIRTUAL_RIDE ActivityType = "VirtualRide"
	ACTIVITYTYPE_VIRTUAL_RUN ActivityType = "VirtualRun"
	ACTIVITYTYPE_WALK ActivityType = "Walk"
	ACTIVITYTYPE_WEIGHT_TRAINING ActivityType = "WeightTraining"
	ACTIVITYTYPE_WHEELCHAIR ActivityType = "Wheelchair"
	ACTIVITYTYPE_WINDSURF ActivityType = "Windsurf"
	ACTIVITYTYPE_WORKOUT ActivityType = "Workout"
	ACTIVITYTYPE_YOGA ActivityType = "Yoga"
)

// All allowed values of ActivityType enum
var AllowedActivityTypeEnumValues = []ActivityType{
	"AlpineSki",
	"BackcountrySki",
	"Canoeing",
	"Crossfit",
	"EBikeRide",
	"Elliptical",
	"Golf",
	"Handcycle",
	"Hike",
	"IceSkate",
	"InlineSkate",
	"Kayaking",
	"Kitesurf",
	"NordicSki",
	"Ride",
	"RockClimbing",
	"RollerSki",
	"Rowing",
	"Run",
	"Sail",
	"Skateboard",
	"Snowboard",
	"Snowshoe",
	"Soccer",
	"StairStepper",
	"StandUpPaddling",
	"Surfing",
	"Swim",
	"Velomobile",
	"VirtualRide",
	"VirtualRun",
	"Walk",
	"WeightTraining",
	"Wheelchair",
	"Windsurf",
	"Workout",
	"Yoga",
}

func (v *ActivityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActivityType(value)
	for _, existing := range AllowedActivityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActivityType", value)
}

// NewActivityTypeFromValue returns a pointer to a valid ActivityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActivityTypeFromValue(v string) (*ActivityType, error) {
	ev := ActivityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActivityType: valid values are %v", v, AllowedActivityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActivityType) IsValid() bool {
	for _, existing := range AllowedActivityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActivityType value
func (v ActivityType) Ptr() *ActivityType {
	return &v
}

type NullableActivityType struct {
	value *ActivityType
	isSet bool
}

func (v NullableActivityType) Get() *ActivityType {
	return v.value
}

func (v *NullableActivityType) Set(val *ActivityType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityType(val *ActivityType) *NullableActivityType {
	return &NullableActivityType{value: val, isSet: true}
}

func (v NullableActivityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

