/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the UpdatableActivity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatableActivity{}

// UpdatableActivity struct for UpdatableActivity
type UpdatableActivity struct {
	// Whether this activity is a commute
	Commute *bool `json:"commute,omitempty"`
	// Whether this activity was recorded on a training machine
	Trainer *bool `json:"trainer,omitempty"`
	// Whether this activity is muted
	HideFromHome *bool `json:"hide_from_home,omitempty"`
	// The description of the activity
	Description *string `json:"description,omitempty"`
	// The name of the activity
	Name *string `json:"name,omitempty"`
	Type *ActivityType `json:"type,omitempty"`
	SportType *SportType `json:"sport_type,omitempty"`
	// Identifier for the gear associated with the activity. ‘none’ clears gear from activity
	GearId *string `json:"gear_id,omitempty"`
}

// NewUpdatableActivity instantiates a new UpdatableActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatableActivity() *UpdatableActivity {
	this := UpdatableActivity{}
	return &this
}

// NewUpdatableActivityWithDefaults instantiates a new UpdatableActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatableActivityWithDefaults() *UpdatableActivity {
	this := UpdatableActivity{}
	return &this
}

// GetCommute returns the Commute field value if set, zero value otherwise.
func (o *UpdatableActivity) GetCommute() bool {
	if o == nil || IsNil(o.Commute) {
		var ret bool
		return ret
	}
	return *o.Commute
}

// GetCommuteOk returns a tuple with the Commute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatableActivity) GetCommuteOk() (*bool, bool) {
	if o == nil || IsNil(o.Commute) {
		return nil, false
	}
	return o.Commute, true
}

// HasCommute returns a boolean if a field has been set.
func (o *UpdatableActivity) HasCommute() bool {
	if o != nil && !IsNil(o.Commute) {
		return true
	}

	return false
}

// SetCommute gets a reference to the given bool and assigns it to the Commute field.
func (o *UpdatableActivity) SetCommute(v bool) {
	o.Commute = &v
}

// GetTrainer returns the Trainer field value if set, zero value otherwise.
func (o *UpdatableActivity) GetTrainer() bool {
	if o == nil || IsNil(o.Trainer) {
		var ret bool
		return ret
	}
	return *o.Trainer
}

// GetTrainerOk returns a tuple with the Trainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatableActivity) GetTrainerOk() (*bool, bool) {
	if o == nil || IsNil(o.Trainer) {
		return nil, false
	}
	return o.Trainer, true
}

// HasTrainer returns a boolean if a field has been set.
func (o *UpdatableActivity) HasTrainer() bool {
	if o != nil && !IsNil(o.Trainer) {
		return true
	}

	return false
}

// SetTrainer gets a reference to the given bool and assigns it to the Trainer field.
func (o *UpdatableActivity) SetTrainer(v bool) {
	o.Trainer = &v
}

// GetHideFromHome returns the HideFromHome field value if set, zero value otherwise.
func (o *UpdatableActivity) GetHideFromHome() bool {
	if o == nil || IsNil(o.HideFromHome) {
		var ret bool
		return ret
	}
	return *o.HideFromHome
}

// GetHideFromHomeOk returns a tuple with the HideFromHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatableActivity) GetHideFromHomeOk() (*bool, bool) {
	if o == nil || IsNil(o.HideFromHome) {
		return nil, false
	}
	return o.HideFromHome, true
}

// HasHideFromHome returns a boolean if a field has been set.
func (o *UpdatableActivity) HasHideFromHome() bool {
	if o != nil && !IsNil(o.HideFromHome) {
		return true
	}

	return false
}

// SetHideFromHome gets a reference to the given bool and assigns it to the HideFromHome field.
func (o *UpdatableActivity) SetHideFromHome(v bool) {
	o.HideFromHome = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdatableActivity) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatableActivity) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdatableActivity) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdatableActivity) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdatableActivity) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatableActivity) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdatableActivity) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdatableActivity) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdatableActivity) GetType() ActivityType {
	if o == nil || IsNil(o.Type) {
		var ret ActivityType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatableActivity) GetTypeOk() (*ActivityType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdatableActivity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ActivityType and assigns it to the Type field.
func (o *UpdatableActivity) SetType(v ActivityType) {
	o.Type = &v
}

// GetSportType returns the SportType field value if set, zero value otherwise.
func (o *UpdatableActivity) GetSportType() SportType {
	if o == nil || IsNil(o.SportType) {
		var ret SportType
		return ret
	}
	return *o.SportType
}

// GetSportTypeOk returns a tuple with the SportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatableActivity) GetSportTypeOk() (*SportType, bool) {
	if o == nil || IsNil(o.SportType) {
		return nil, false
	}
	return o.SportType, true
}

// HasSportType returns a boolean if a field has been set.
func (o *UpdatableActivity) HasSportType() bool {
	if o != nil && !IsNil(o.SportType) {
		return true
	}

	return false
}

// SetSportType gets a reference to the given SportType and assigns it to the SportType field.
func (o *UpdatableActivity) SetSportType(v SportType) {
	o.SportType = &v
}

// GetGearId returns the GearId field value if set, zero value otherwise.
func (o *UpdatableActivity) GetGearId() string {
	if o == nil || IsNil(o.GearId) {
		var ret string
		return ret
	}
	return *o.GearId
}

// GetGearIdOk returns a tuple with the GearId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatableActivity) GetGearIdOk() (*string, bool) {
	if o == nil || IsNil(o.GearId) {
		return nil, false
	}
	return o.GearId, true
}

// HasGearId returns a boolean if a field has been set.
func (o *UpdatableActivity) HasGearId() bool {
	if o != nil && !IsNil(o.GearId) {
		return true
	}

	return false
}

// SetGearId gets a reference to the given string and assigns it to the GearId field.
func (o *UpdatableActivity) SetGearId(v string) {
	o.GearId = &v
}

func (o UpdatableActivity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatableActivity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Commute) {
		toSerialize["commute"] = o.Commute
	}
	if !IsNil(o.Trainer) {
		toSerialize["trainer"] = o.Trainer
	}
	if !IsNil(o.HideFromHome) {
		toSerialize["hide_from_home"] = o.HideFromHome
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SportType) {
		toSerialize["sport_type"] = o.SportType
	}
	if !IsNil(o.GearId) {
		toSerialize["gear_id"] = o.GearId
	}
	return toSerialize, nil
}

type NullableUpdatableActivity struct {
	value *UpdatableActivity
	isSet bool
}

func (v NullableUpdatableActivity) Get() *UpdatableActivity {
	return v.value
}

func (v *NullableUpdatableActivity) Set(val *UpdatableActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatableActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatableActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatableActivity(val *UpdatableActivity) *NullableUpdatableActivity {
	return &NullableUpdatableActivity{value: val, isSet: true}
}

func (v NullableUpdatableActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatableActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


