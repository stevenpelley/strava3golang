/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the ClubAthlete type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClubAthlete{}

// ClubAthlete struct for ClubAthlete
type ClubAthlete struct {
	// Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
	ResourceState *int32 `json:"resource_state,omitempty"`
	// The athlete's first name.
	Firstname *string `json:"firstname,omitempty"`
	// The athlete's last initial.
	Lastname *string `json:"lastname,omitempty"`
	// The athlete's member status.
	Member *string `json:"member,omitempty"`
	// Whether the athlete is a club admin.
	Admin *bool `json:"admin,omitempty"`
	// Whether the athlete is club owner.
	Owner *bool `json:"owner,omitempty"`
}

// NewClubAthlete instantiates a new ClubAthlete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClubAthlete() *ClubAthlete {
	this := ClubAthlete{}
	return &this
}

// NewClubAthleteWithDefaults instantiates a new ClubAthlete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClubAthleteWithDefaults() *ClubAthlete {
	this := ClubAthlete{}
	return &this
}

// GetResourceState returns the ResourceState field value if set, zero value otherwise.
func (o *ClubAthlete) GetResourceState() int32 {
	if o == nil || IsNil(o.ResourceState) {
		var ret int32
		return ret
	}
	return *o.ResourceState
}

// GetResourceStateOk returns a tuple with the ResourceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubAthlete) GetResourceStateOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourceState) {
		return nil, false
	}
	return o.ResourceState, true
}

// HasResourceState returns a boolean if a field has been set.
func (o *ClubAthlete) HasResourceState() bool {
	if o != nil && !IsNil(o.ResourceState) {
		return true
	}

	return false
}

// SetResourceState gets a reference to the given int32 and assigns it to the ResourceState field.
func (o *ClubAthlete) SetResourceState(v int32) {
	o.ResourceState = &v
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *ClubAthlete) GetFirstname() string {
	if o == nil || IsNil(o.Firstname) {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubAthlete) GetFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.Firstname) {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *ClubAthlete) HasFirstname() bool {
	if o != nil && !IsNil(o.Firstname) {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *ClubAthlete) SetFirstname(v string) {
	o.Firstname = &v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *ClubAthlete) GetLastname() string {
	if o == nil || IsNil(o.Lastname) {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubAthlete) GetLastnameOk() (*string, bool) {
	if o == nil || IsNil(o.Lastname) {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *ClubAthlete) HasLastname() bool {
	if o != nil && !IsNil(o.Lastname) {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *ClubAthlete) SetLastname(v string) {
	o.Lastname = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ClubAthlete) GetMember() string {
	if o == nil || IsNil(o.Member) {
		var ret string
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubAthlete) GetMemberOk() (*string, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ClubAthlete) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given string and assigns it to the Member field.
func (o *ClubAthlete) SetMember(v string) {
	o.Member = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *ClubAthlete) GetAdmin() bool {
	if o == nil || IsNil(o.Admin) {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubAthlete) GetAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *ClubAthlete) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *ClubAthlete) SetAdmin(v bool) {
	o.Admin = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ClubAthlete) GetOwner() bool {
	if o == nil || IsNil(o.Owner) {
		var ret bool
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubAthlete) GetOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ClubAthlete) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given bool and assigns it to the Owner field.
func (o *ClubAthlete) SetOwner(v bool) {
	o.Owner = &v
}

func (o ClubAthlete) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClubAthlete) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceState) {
		toSerialize["resource_state"] = o.ResourceState
	}
	if !IsNil(o.Firstname) {
		toSerialize["firstname"] = o.Firstname
	}
	if !IsNil(o.Lastname) {
		toSerialize["lastname"] = o.Lastname
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	return toSerialize, nil
}

type NullableClubAthlete struct {
	value *ClubAthlete
	isSet bool
}

func (v NullableClubAthlete) Get() *ClubAthlete {
	return v.value
}

func (v *NullableClubAthlete) Set(val *ClubAthlete) {
	v.value = val
	v.isSet = true
}

func (v NullableClubAthlete) IsSet() bool {
	return v.isSet
}

func (v *NullableClubAthlete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClubAthlete(val *ClubAthlete) *NullableClubAthlete {
	return &NullableClubAthlete{value: val, isSet: true}
}

func (v NullableClubAthlete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClubAthlete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


