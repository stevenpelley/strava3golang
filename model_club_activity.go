/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the ClubActivity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClubActivity{}

// ClubActivity struct for ClubActivity
type ClubActivity struct {
	Athlete *MetaAthlete `json:"athlete,omitempty"`
	// The name of the activity
	Name *string `json:"name,omitempty"`
	// The activity's distance, in meters
	Distance *float32 `json:"distance,omitempty"`
	// The activity's moving time, in seconds
	MovingTime *int32 `json:"moving_time,omitempty"`
	// The activity's elapsed time, in seconds
	ElapsedTime *int32 `json:"elapsed_time,omitempty"`
	// The activity's total elevation gain.
	TotalElevationGain *float32 `json:"total_elevation_gain,omitempty"`
	Type *ActivityType `json:"type,omitempty"`
	SportType *SportType `json:"sport_type,omitempty"`
	// The activity's workout type
	WorkoutType *int32 `json:"workout_type,omitempty"`
}

// NewClubActivity instantiates a new ClubActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClubActivity() *ClubActivity {
	this := ClubActivity{}
	return &this
}

// NewClubActivityWithDefaults instantiates a new ClubActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClubActivityWithDefaults() *ClubActivity {
	this := ClubActivity{}
	return &this
}

// GetAthlete returns the Athlete field value if set, zero value otherwise.
func (o *ClubActivity) GetAthlete() MetaAthlete {
	if o == nil || IsNil(o.Athlete) {
		var ret MetaAthlete
		return ret
	}
	return *o.Athlete
}

// GetAthleteOk returns a tuple with the Athlete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubActivity) GetAthleteOk() (*MetaAthlete, bool) {
	if o == nil || IsNil(o.Athlete) {
		return nil, false
	}
	return o.Athlete, true
}

// HasAthlete returns a boolean if a field has been set.
func (o *ClubActivity) HasAthlete() bool {
	if o != nil && !IsNil(o.Athlete) {
		return true
	}

	return false
}

// SetAthlete gets a reference to the given MetaAthlete and assigns it to the Athlete field.
func (o *ClubActivity) SetAthlete(v MetaAthlete) {
	o.Athlete = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClubActivity) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubActivity) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClubActivity) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClubActivity) SetName(v string) {
	o.Name = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *ClubActivity) GetDistance() float32 {
	if o == nil || IsNil(o.Distance) {
		var ret float32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubActivity) GetDistanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *ClubActivity) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float32 and assigns it to the Distance field.
func (o *ClubActivity) SetDistance(v float32) {
	o.Distance = &v
}

// GetMovingTime returns the MovingTime field value if set, zero value otherwise.
func (o *ClubActivity) GetMovingTime() int32 {
	if o == nil || IsNil(o.MovingTime) {
		var ret int32
		return ret
	}
	return *o.MovingTime
}

// GetMovingTimeOk returns a tuple with the MovingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubActivity) GetMovingTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.MovingTime) {
		return nil, false
	}
	return o.MovingTime, true
}

// HasMovingTime returns a boolean if a field has been set.
func (o *ClubActivity) HasMovingTime() bool {
	if o != nil && !IsNil(o.MovingTime) {
		return true
	}

	return false
}

// SetMovingTime gets a reference to the given int32 and assigns it to the MovingTime field.
func (o *ClubActivity) SetMovingTime(v int32) {
	o.MovingTime = &v
}

// GetElapsedTime returns the ElapsedTime field value if set, zero value otherwise.
func (o *ClubActivity) GetElapsedTime() int32 {
	if o == nil || IsNil(o.ElapsedTime) {
		var ret int32
		return ret
	}
	return *o.ElapsedTime
}

// GetElapsedTimeOk returns a tuple with the ElapsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubActivity) GetElapsedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ElapsedTime) {
		return nil, false
	}
	return o.ElapsedTime, true
}

// HasElapsedTime returns a boolean if a field has been set.
func (o *ClubActivity) HasElapsedTime() bool {
	if o != nil && !IsNil(o.ElapsedTime) {
		return true
	}

	return false
}

// SetElapsedTime gets a reference to the given int32 and assigns it to the ElapsedTime field.
func (o *ClubActivity) SetElapsedTime(v int32) {
	o.ElapsedTime = &v
}

// GetTotalElevationGain returns the TotalElevationGain field value if set, zero value otherwise.
func (o *ClubActivity) GetTotalElevationGain() float32 {
	if o == nil || IsNil(o.TotalElevationGain) {
		var ret float32
		return ret
	}
	return *o.TotalElevationGain
}

// GetTotalElevationGainOk returns a tuple with the TotalElevationGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubActivity) GetTotalElevationGainOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalElevationGain) {
		return nil, false
	}
	return o.TotalElevationGain, true
}

// HasTotalElevationGain returns a boolean if a field has been set.
func (o *ClubActivity) HasTotalElevationGain() bool {
	if o != nil && !IsNil(o.TotalElevationGain) {
		return true
	}

	return false
}

// SetTotalElevationGain gets a reference to the given float32 and assigns it to the TotalElevationGain field.
func (o *ClubActivity) SetTotalElevationGain(v float32) {
	o.TotalElevationGain = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClubActivity) GetType() ActivityType {
	if o == nil || IsNil(o.Type) {
		var ret ActivityType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubActivity) GetTypeOk() (*ActivityType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClubActivity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ActivityType and assigns it to the Type field.
func (o *ClubActivity) SetType(v ActivityType) {
	o.Type = &v
}

// GetSportType returns the SportType field value if set, zero value otherwise.
func (o *ClubActivity) GetSportType() SportType {
	if o == nil || IsNil(o.SportType) {
		var ret SportType
		return ret
	}
	return *o.SportType
}

// GetSportTypeOk returns a tuple with the SportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubActivity) GetSportTypeOk() (*SportType, bool) {
	if o == nil || IsNil(o.SportType) {
		return nil, false
	}
	return o.SportType, true
}

// HasSportType returns a boolean if a field has been set.
func (o *ClubActivity) HasSportType() bool {
	if o != nil && !IsNil(o.SportType) {
		return true
	}

	return false
}

// SetSportType gets a reference to the given SportType and assigns it to the SportType field.
func (o *ClubActivity) SetSportType(v SportType) {
	o.SportType = &v
}

// GetWorkoutType returns the WorkoutType field value if set, zero value otherwise.
func (o *ClubActivity) GetWorkoutType() int32 {
	if o == nil || IsNil(o.WorkoutType) {
		var ret int32
		return ret
	}
	return *o.WorkoutType
}

// GetWorkoutTypeOk returns a tuple with the WorkoutType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClubActivity) GetWorkoutTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.WorkoutType) {
		return nil, false
	}
	return o.WorkoutType, true
}

// HasWorkoutType returns a boolean if a field has been set.
func (o *ClubActivity) HasWorkoutType() bool {
	if o != nil && !IsNil(o.WorkoutType) {
		return true
	}

	return false
}

// SetWorkoutType gets a reference to the given int32 and assigns it to the WorkoutType field.
func (o *ClubActivity) SetWorkoutType(v int32) {
	o.WorkoutType = &v
}

func (o ClubActivity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClubActivity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Athlete) {
		toSerialize["athlete"] = o.Athlete
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.MovingTime) {
		toSerialize["moving_time"] = o.MovingTime
	}
	if !IsNil(o.ElapsedTime) {
		toSerialize["elapsed_time"] = o.ElapsedTime
	}
	if !IsNil(o.TotalElevationGain) {
		toSerialize["total_elevation_gain"] = o.TotalElevationGain
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SportType) {
		toSerialize["sport_type"] = o.SportType
	}
	if !IsNil(o.WorkoutType) {
		toSerialize["workout_type"] = o.WorkoutType
	}
	return toSerialize, nil
}

type NullableClubActivity struct {
	value *ClubActivity
	isSet bool
}

func (v NullableClubActivity) Get() *ClubActivity {
	return v.value
}

func (v *NullableClubActivity) Set(val *ClubActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableClubActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableClubActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClubActivity(val *ClubActivity) *NullableClubActivity {
	return &NullableClubActivity{value: val, isSet: true}
}

func (v NullableClubActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClubActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


