/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the Fault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fault{}

// Fault Encapsulates the errors that may be returned from the API.
type Fault struct {
	// The set of specific errors associated with this fault, if any.
	Errors []Error `json:"errors,omitempty"`
	// The message of the fault.
	Message *string `json:"message,omitempty"`
}

// NewFault instantiates a new Fault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFault() *Fault {
	this := Fault{}
	return &this
}

// NewFaultWithDefaults instantiates a new Fault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFaultWithDefaults() *Fault {
	this := Fault{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Fault) GetErrors() []Error {
	if o == nil || IsNil(o.Errors) {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fault) GetErrorsOk() ([]Error, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Fault) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *Fault) SetErrors(v []Error) {
	o.Errors = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Fault) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fault) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Fault) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Fault) SetMessage(v string) {
	o.Message = &v
}

func (o Fault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableFault struct {
	value *Fault
	isSet bool
}

func (v NullableFault) Get() *Fault {
	return v.value
}

func (v *NullableFault) Set(val *Fault) {
	v.value = val
	v.isSet = true
}

func (v NullableFault) IsSet() bool {
	return v.isSet
}

func (v *NullableFault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFault(val *Fault) *NullableFault {
	return &NullableFault{value: val, isSet: true}
}

func (v NullableFault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


