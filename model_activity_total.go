/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the ActivityTotal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityTotal{}

// ActivityTotal A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
type ActivityTotal struct {
	// The number of activities considered in this total.
	Count *int32 `json:"count,omitempty"`
	// The total distance covered by the considered activities.
	Distance *float32 `json:"distance,omitempty"`
	// The total moving time of the considered activities.
	MovingTime *int32 `json:"moving_time,omitempty"`
	// The total elapsed time of the considered activities.
	ElapsedTime *int32 `json:"elapsed_time,omitempty"`
	// The total elevation gain of the considered activities.
	ElevationGain *float32 `json:"elevation_gain,omitempty"`
	// The total number of achievements of the considered activities.
	AchievementCount *int32 `json:"achievement_count,omitempty"`
}

// NewActivityTotal instantiates a new ActivityTotal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityTotal() *ActivityTotal {
	this := ActivityTotal{}
	return &this
}

// NewActivityTotalWithDefaults instantiates a new ActivityTotal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityTotalWithDefaults() *ActivityTotal {
	this := ActivityTotal{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ActivityTotal) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTotal) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ActivityTotal) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ActivityTotal) SetCount(v int32) {
	o.Count = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *ActivityTotal) GetDistance() float32 {
	if o == nil || IsNil(o.Distance) {
		var ret float32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTotal) GetDistanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *ActivityTotal) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float32 and assigns it to the Distance field.
func (o *ActivityTotal) SetDistance(v float32) {
	o.Distance = &v
}

// GetMovingTime returns the MovingTime field value if set, zero value otherwise.
func (o *ActivityTotal) GetMovingTime() int32 {
	if o == nil || IsNil(o.MovingTime) {
		var ret int32
		return ret
	}
	return *o.MovingTime
}

// GetMovingTimeOk returns a tuple with the MovingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTotal) GetMovingTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.MovingTime) {
		return nil, false
	}
	return o.MovingTime, true
}

// HasMovingTime returns a boolean if a field has been set.
func (o *ActivityTotal) HasMovingTime() bool {
	if o != nil && !IsNil(o.MovingTime) {
		return true
	}

	return false
}

// SetMovingTime gets a reference to the given int32 and assigns it to the MovingTime field.
func (o *ActivityTotal) SetMovingTime(v int32) {
	o.MovingTime = &v
}

// GetElapsedTime returns the ElapsedTime field value if set, zero value otherwise.
func (o *ActivityTotal) GetElapsedTime() int32 {
	if o == nil || IsNil(o.ElapsedTime) {
		var ret int32
		return ret
	}
	return *o.ElapsedTime
}

// GetElapsedTimeOk returns a tuple with the ElapsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTotal) GetElapsedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ElapsedTime) {
		return nil, false
	}
	return o.ElapsedTime, true
}

// HasElapsedTime returns a boolean if a field has been set.
func (o *ActivityTotal) HasElapsedTime() bool {
	if o != nil && !IsNil(o.ElapsedTime) {
		return true
	}

	return false
}

// SetElapsedTime gets a reference to the given int32 and assigns it to the ElapsedTime field.
func (o *ActivityTotal) SetElapsedTime(v int32) {
	o.ElapsedTime = &v
}

// GetElevationGain returns the ElevationGain field value if set, zero value otherwise.
func (o *ActivityTotal) GetElevationGain() float32 {
	if o == nil || IsNil(o.ElevationGain) {
		var ret float32
		return ret
	}
	return *o.ElevationGain
}

// GetElevationGainOk returns a tuple with the ElevationGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTotal) GetElevationGainOk() (*float32, bool) {
	if o == nil || IsNil(o.ElevationGain) {
		return nil, false
	}
	return o.ElevationGain, true
}

// HasElevationGain returns a boolean if a field has been set.
func (o *ActivityTotal) HasElevationGain() bool {
	if o != nil && !IsNil(o.ElevationGain) {
		return true
	}

	return false
}

// SetElevationGain gets a reference to the given float32 and assigns it to the ElevationGain field.
func (o *ActivityTotal) SetElevationGain(v float32) {
	o.ElevationGain = &v
}

// GetAchievementCount returns the AchievementCount field value if set, zero value otherwise.
func (o *ActivityTotal) GetAchievementCount() int32 {
	if o == nil || IsNil(o.AchievementCount) {
		var ret int32
		return ret
	}
	return *o.AchievementCount
}

// GetAchievementCountOk returns a tuple with the AchievementCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTotal) GetAchievementCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AchievementCount) {
		return nil, false
	}
	return o.AchievementCount, true
}

// HasAchievementCount returns a boolean if a field has been set.
func (o *ActivityTotal) HasAchievementCount() bool {
	if o != nil && !IsNil(o.AchievementCount) {
		return true
	}

	return false
}

// SetAchievementCount gets a reference to the given int32 and assigns it to the AchievementCount field.
func (o *ActivityTotal) SetAchievementCount(v int32) {
	o.AchievementCount = &v
}

func (o ActivityTotal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityTotal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.MovingTime) {
		toSerialize["moving_time"] = o.MovingTime
	}
	if !IsNil(o.ElapsedTime) {
		toSerialize["elapsed_time"] = o.ElapsedTime
	}
	if !IsNil(o.ElevationGain) {
		toSerialize["elevation_gain"] = o.ElevationGain
	}
	if !IsNil(o.AchievementCount) {
		toSerialize["achievement_count"] = o.AchievementCount
	}
	return toSerialize, nil
}

type NullableActivityTotal struct {
	value *ActivityTotal
	isSet bool
}

func (v NullableActivityTotal) Get() *ActivityTotal {
	return v.value
}

func (v *NullableActivityTotal) Set(val *ActivityTotal) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityTotal) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityTotal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityTotal(val *ActivityTotal) *NullableActivityTotal {
	return &NullableActivityTotal{value: val, isSet: true}
}

func (v NullableActivityTotal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityTotal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


