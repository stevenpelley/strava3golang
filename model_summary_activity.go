/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
	"time"
)

// checks if the SummaryActivity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SummaryActivity{}

// SummaryActivity struct for SummaryActivity
type SummaryActivity struct {
	// The unique identifier of the activity
	Id *int64 `json:"id,omitempty"`
	// The identifier provided at upload time
	ExternalId *string `json:"external_id,omitempty"`
	// The identifier of the upload that resulted in this activity
	UploadId *int64 `json:"upload_id,omitempty"`
	Athlete *MetaAthlete `json:"athlete,omitempty"`
	// The name of the activity
	Name *string `json:"name,omitempty"`
	// The activity's distance, in meters
	Distance *float32 `json:"distance,omitempty"`
	// The activity's moving time, in seconds
	MovingTime *int32 `json:"moving_time,omitempty"`
	// The activity's elapsed time, in seconds
	ElapsedTime *int32 `json:"elapsed_time,omitempty"`
	// The activity's total elevation gain.
	TotalElevationGain *float32 `json:"total_elevation_gain,omitempty"`
	// The activity's highest elevation, in meters
	ElevHigh *float32 `json:"elev_high,omitempty"`
	// The activity's lowest elevation, in meters
	ElevLow *float32 `json:"elev_low,omitempty"`
	Type *ActivityType `json:"type,omitempty"`
	SportType *SportType `json:"sport_type,omitempty"`
	// The time at which the activity was started.
	StartDate *time.Time `json:"start_date,omitempty"`
	// The time at which the activity was started in the local timezone.
	StartDateLocal *time.Time `json:"start_date_local,omitempty"`
	// The timezone of the activity
	Timezone *string `json:"timezone,omitempty"`
	// A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
	StartLatlng []float32 `json:"start_latlng,omitempty"`
	// A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
	EndLatlng []float32 `json:"end_latlng,omitempty"`
	// The number of achievements gained during this activity
	AchievementCount *int32 `json:"achievement_count,omitempty"`
	// The number of kudos given for this activity
	KudosCount *int32 `json:"kudos_count,omitempty"`
	// The number of comments for this activity
	CommentCount *int32 `json:"comment_count,omitempty"`
	// The number of athletes for taking part in a group activity
	AthleteCount *int32 `json:"athlete_count,omitempty"`
	// The number of Instagram photos for this activity
	PhotoCount *int32 `json:"photo_count,omitempty"`
	// The number of Instagram and Strava photos for this activity
	TotalPhotoCount *int32 `json:"total_photo_count,omitempty"`
	Map *PolylineMap `json:"map,omitempty"`
	// Whether this activity was recorded on a training machine
	Trainer *bool `json:"trainer,omitempty"`
	// Whether this activity is a commute
	Commute *bool `json:"commute,omitempty"`
	// Whether this activity was created manually
	Manual *bool `json:"manual,omitempty"`
	// Whether this activity is private
	Private *bool `json:"private,omitempty"`
	// Whether this activity is flagged
	Flagged *bool `json:"flagged,omitempty"`
	// The activity's workout type
	WorkoutType *int32 `json:"workout_type,omitempty"`
	// The unique identifier of the upload in string format
	UploadIdStr *string `json:"upload_id_str,omitempty"`
	// The activity's average speed, in meters per second
	AverageSpeed *float32 `json:"average_speed,omitempty"`
	// The activity's max speed, in meters per second
	MaxSpeed *float32 `json:"max_speed,omitempty"`
	// Whether the logged-in athlete has kudoed this activity
	HasKudoed *bool `json:"has_kudoed,omitempty"`
	// Whether the activity is muted
	HideFromHome *bool `json:"hide_from_home,omitempty"`
	// The id of the gear for the activity
	GearId *string `json:"gear_id,omitempty"`
	// The total work done in kilojoules during this activity. Rides only
	Kilojoules *float32 `json:"kilojoules,omitempty"`
	// Average power output in watts during this activity. Rides only
	AverageWatts *float32 `json:"average_watts,omitempty"`
	// Whether the watts are from a power meter, false if estimated
	DeviceWatts *bool `json:"device_watts,omitempty"`
	// Rides with power meter data only
	MaxWatts *int32 `json:"max_watts,omitempty"`
	// Similar to Normalized Power. Rides with power meter data only
	WeightedAverageWatts *int32 `json:"weighted_average_watts,omitempty"`
}

// NewSummaryActivity instantiates a new SummaryActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummaryActivity() *SummaryActivity {
	this := SummaryActivity{}
	return &this
}

// NewSummaryActivityWithDefaults instantiates a new SummaryActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryActivityWithDefaults() *SummaryActivity {
	this := SummaryActivity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SummaryActivity) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SummaryActivity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SummaryActivity) SetId(v int64) {
	o.Id = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *SummaryActivity) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *SummaryActivity) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *SummaryActivity) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetUploadId returns the UploadId field value if set, zero value otherwise.
func (o *SummaryActivity) GetUploadId() int64 {
	if o == nil || IsNil(o.UploadId) {
		var ret int64
		return ret
	}
	return *o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetUploadIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UploadId) {
		return nil, false
	}
	return o.UploadId, true
}

// HasUploadId returns a boolean if a field has been set.
func (o *SummaryActivity) HasUploadId() bool {
	if o != nil && !IsNil(o.UploadId) {
		return true
	}

	return false
}

// SetUploadId gets a reference to the given int64 and assigns it to the UploadId field.
func (o *SummaryActivity) SetUploadId(v int64) {
	o.UploadId = &v
}

// GetAthlete returns the Athlete field value if set, zero value otherwise.
func (o *SummaryActivity) GetAthlete() MetaAthlete {
	if o == nil || IsNil(o.Athlete) {
		var ret MetaAthlete
		return ret
	}
	return *o.Athlete
}

// GetAthleteOk returns a tuple with the Athlete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetAthleteOk() (*MetaAthlete, bool) {
	if o == nil || IsNil(o.Athlete) {
		return nil, false
	}
	return o.Athlete, true
}

// HasAthlete returns a boolean if a field has been set.
func (o *SummaryActivity) HasAthlete() bool {
	if o != nil && !IsNil(o.Athlete) {
		return true
	}

	return false
}

// SetAthlete gets a reference to the given MetaAthlete and assigns it to the Athlete field.
func (o *SummaryActivity) SetAthlete(v MetaAthlete) {
	o.Athlete = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SummaryActivity) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SummaryActivity) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SummaryActivity) SetName(v string) {
	o.Name = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *SummaryActivity) GetDistance() float32 {
	if o == nil || IsNil(o.Distance) {
		var ret float32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetDistanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *SummaryActivity) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float32 and assigns it to the Distance field.
func (o *SummaryActivity) SetDistance(v float32) {
	o.Distance = &v
}

// GetMovingTime returns the MovingTime field value if set, zero value otherwise.
func (o *SummaryActivity) GetMovingTime() int32 {
	if o == nil || IsNil(o.MovingTime) {
		var ret int32
		return ret
	}
	return *o.MovingTime
}

// GetMovingTimeOk returns a tuple with the MovingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetMovingTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.MovingTime) {
		return nil, false
	}
	return o.MovingTime, true
}

// HasMovingTime returns a boolean if a field has been set.
func (o *SummaryActivity) HasMovingTime() bool {
	if o != nil && !IsNil(o.MovingTime) {
		return true
	}

	return false
}

// SetMovingTime gets a reference to the given int32 and assigns it to the MovingTime field.
func (o *SummaryActivity) SetMovingTime(v int32) {
	o.MovingTime = &v
}

// GetElapsedTime returns the ElapsedTime field value if set, zero value otherwise.
func (o *SummaryActivity) GetElapsedTime() int32 {
	if o == nil || IsNil(o.ElapsedTime) {
		var ret int32
		return ret
	}
	return *o.ElapsedTime
}

// GetElapsedTimeOk returns a tuple with the ElapsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetElapsedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ElapsedTime) {
		return nil, false
	}
	return o.ElapsedTime, true
}

// HasElapsedTime returns a boolean if a field has been set.
func (o *SummaryActivity) HasElapsedTime() bool {
	if o != nil && !IsNil(o.ElapsedTime) {
		return true
	}

	return false
}

// SetElapsedTime gets a reference to the given int32 and assigns it to the ElapsedTime field.
func (o *SummaryActivity) SetElapsedTime(v int32) {
	o.ElapsedTime = &v
}

// GetTotalElevationGain returns the TotalElevationGain field value if set, zero value otherwise.
func (o *SummaryActivity) GetTotalElevationGain() float32 {
	if o == nil || IsNil(o.TotalElevationGain) {
		var ret float32
		return ret
	}
	return *o.TotalElevationGain
}

// GetTotalElevationGainOk returns a tuple with the TotalElevationGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetTotalElevationGainOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalElevationGain) {
		return nil, false
	}
	return o.TotalElevationGain, true
}

// HasTotalElevationGain returns a boolean if a field has been set.
func (o *SummaryActivity) HasTotalElevationGain() bool {
	if o != nil && !IsNil(o.TotalElevationGain) {
		return true
	}

	return false
}

// SetTotalElevationGain gets a reference to the given float32 and assigns it to the TotalElevationGain field.
func (o *SummaryActivity) SetTotalElevationGain(v float32) {
	o.TotalElevationGain = &v
}

// GetElevHigh returns the ElevHigh field value if set, zero value otherwise.
func (o *SummaryActivity) GetElevHigh() float32 {
	if o == nil || IsNil(o.ElevHigh) {
		var ret float32
		return ret
	}
	return *o.ElevHigh
}

// GetElevHighOk returns a tuple with the ElevHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetElevHighOk() (*float32, bool) {
	if o == nil || IsNil(o.ElevHigh) {
		return nil, false
	}
	return o.ElevHigh, true
}

// HasElevHigh returns a boolean if a field has been set.
func (o *SummaryActivity) HasElevHigh() bool {
	if o != nil && !IsNil(o.ElevHigh) {
		return true
	}

	return false
}

// SetElevHigh gets a reference to the given float32 and assigns it to the ElevHigh field.
func (o *SummaryActivity) SetElevHigh(v float32) {
	o.ElevHigh = &v
}

// GetElevLow returns the ElevLow field value if set, zero value otherwise.
func (o *SummaryActivity) GetElevLow() float32 {
	if o == nil || IsNil(o.ElevLow) {
		var ret float32
		return ret
	}
	return *o.ElevLow
}

// GetElevLowOk returns a tuple with the ElevLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetElevLowOk() (*float32, bool) {
	if o == nil || IsNil(o.ElevLow) {
		return nil, false
	}
	return o.ElevLow, true
}

// HasElevLow returns a boolean if a field has been set.
func (o *SummaryActivity) HasElevLow() bool {
	if o != nil && !IsNil(o.ElevLow) {
		return true
	}

	return false
}

// SetElevLow gets a reference to the given float32 and assigns it to the ElevLow field.
func (o *SummaryActivity) SetElevLow(v float32) {
	o.ElevLow = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SummaryActivity) GetType() ActivityType {
	if o == nil || IsNil(o.Type) {
		var ret ActivityType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetTypeOk() (*ActivityType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SummaryActivity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ActivityType and assigns it to the Type field.
func (o *SummaryActivity) SetType(v ActivityType) {
	o.Type = &v
}

// GetSportType returns the SportType field value if set, zero value otherwise.
func (o *SummaryActivity) GetSportType() SportType {
	if o == nil || IsNil(o.SportType) {
		var ret SportType
		return ret
	}
	return *o.SportType
}

// GetSportTypeOk returns a tuple with the SportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetSportTypeOk() (*SportType, bool) {
	if o == nil || IsNil(o.SportType) {
		return nil, false
	}
	return o.SportType, true
}

// HasSportType returns a boolean if a field has been set.
func (o *SummaryActivity) HasSportType() bool {
	if o != nil && !IsNil(o.SportType) {
		return true
	}

	return false
}

// SetSportType gets a reference to the given SportType and assigns it to the SportType field.
func (o *SummaryActivity) SetSportType(v SportType) {
	o.SportType = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *SummaryActivity) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *SummaryActivity) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *SummaryActivity) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStartDateLocal returns the StartDateLocal field value if set, zero value otherwise.
func (o *SummaryActivity) GetStartDateLocal() time.Time {
	if o == nil || IsNil(o.StartDateLocal) {
		var ret time.Time
		return ret
	}
	return *o.StartDateLocal
}

// GetStartDateLocalOk returns a tuple with the StartDateLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetStartDateLocalOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDateLocal) {
		return nil, false
	}
	return o.StartDateLocal, true
}

// HasStartDateLocal returns a boolean if a field has been set.
func (o *SummaryActivity) HasStartDateLocal() bool {
	if o != nil && !IsNil(o.StartDateLocal) {
		return true
	}

	return false
}

// SetStartDateLocal gets a reference to the given time.Time and assigns it to the StartDateLocal field.
func (o *SummaryActivity) SetStartDateLocal(v time.Time) {
	o.StartDateLocal = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *SummaryActivity) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *SummaryActivity) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *SummaryActivity) SetTimezone(v string) {
	o.Timezone = &v
}

// GetStartLatlng returns the StartLatlng field value if set, zero value otherwise.
func (o *SummaryActivity) GetStartLatlng() []float32 {
	if o == nil || IsNil(o.StartLatlng) {
		var ret []float32
		return ret
	}
	return o.StartLatlng
}

// GetStartLatlngOk returns a tuple with the StartLatlng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetStartLatlngOk() ([]float32, bool) {
	if o == nil || IsNil(o.StartLatlng) {
		return nil, false
	}
	return o.StartLatlng, true
}

// HasStartLatlng returns a boolean if a field has been set.
func (o *SummaryActivity) HasStartLatlng() bool {
	if o != nil && !IsNil(o.StartLatlng) {
		return true
	}

	return false
}

// SetStartLatlng gets a reference to the given []float32 and assigns it to the StartLatlng field.
func (o *SummaryActivity) SetStartLatlng(v []float32) {
	o.StartLatlng = v
}

// GetEndLatlng returns the EndLatlng field value if set, zero value otherwise.
func (o *SummaryActivity) GetEndLatlng() []float32 {
	if o == nil || IsNil(o.EndLatlng) {
		var ret []float32
		return ret
	}
	return o.EndLatlng
}

// GetEndLatlngOk returns a tuple with the EndLatlng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetEndLatlngOk() ([]float32, bool) {
	if o == nil || IsNil(o.EndLatlng) {
		return nil, false
	}
	return o.EndLatlng, true
}

// HasEndLatlng returns a boolean if a field has been set.
func (o *SummaryActivity) HasEndLatlng() bool {
	if o != nil && !IsNil(o.EndLatlng) {
		return true
	}

	return false
}

// SetEndLatlng gets a reference to the given []float32 and assigns it to the EndLatlng field.
func (o *SummaryActivity) SetEndLatlng(v []float32) {
	o.EndLatlng = v
}

// GetAchievementCount returns the AchievementCount field value if set, zero value otherwise.
func (o *SummaryActivity) GetAchievementCount() int32 {
	if o == nil || IsNil(o.AchievementCount) {
		var ret int32
		return ret
	}
	return *o.AchievementCount
}

// GetAchievementCountOk returns a tuple with the AchievementCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetAchievementCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AchievementCount) {
		return nil, false
	}
	return o.AchievementCount, true
}

// HasAchievementCount returns a boolean if a field has been set.
func (o *SummaryActivity) HasAchievementCount() bool {
	if o != nil && !IsNil(o.AchievementCount) {
		return true
	}

	return false
}

// SetAchievementCount gets a reference to the given int32 and assigns it to the AchievementCount field.
func (o *SummaryActivity) SetAchievementCount(v int32) {
	o.AchievementCount = &v
}

// GetKudosCount returns the KudosCount field value if set, zero value otherwise.
func (o *SummaryActivity) GetKudosCount() int32 {
	if o == nil || IsNil(o.KudosCount) {
		var ret int32
		return ret
	}
	return *o.KudosCount
}

// GetKudosCountOk returns a tuple with the KudosCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetKudosCountOk() (*int32, bool) {
	if o == nil || IsNil(o.KudosCount) {
		return nil, false
	}
	return o.KudosCount, true
}

// HasKudosCount returns a boolean if a field has been set.
func (o *SummaryActivity) HasKudosCount() bool {
	if o != nil && !IsNil(o.KudosCount) {
		return true
	}

	return false
}

// SetKudosCount gets a reference to the given int32 and assigns it to the KudosCount field.
func (o *SummaryActivity) SetKudosCount(v int32) {
	o.KudosCount = &v
}

// GetCommentCount returns the CommentCount field value if set, zero value otherwise.
func (o *SummaryActivity) GetCommentCount() int32 {
	if o == nil || IsNil(o.CommentCount) {
		var ret int32
		return ret
	}
	return *o.CommentCount
}

// GetCommentCountOk returns a tuple with the CommentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetCommentCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CommentCount) {
		return nil, false
	}
	return o.CommentCount, true
}

// HasCommentCount returns a boolean if a field has been set.
func (o *SummaryActivity) HasCommentCount() bool {
	if o != nil && !IsNil(o.CommentCount) {
		return true
	}

	return false
}

// SetCommentCount gets a reference to the given int32 and assigns it to the CommentCount field.
func (o *SummaryActivity) SetCommentCount(v int32) {
	o.CommentCount = &v
}

// GetAthleteCount returns the AthleteCount field value if set, zero value otherwise.
func (o *SummaryActivity) GetAthleteCount() int32 {
	if o == nil || IsNil(o.AthleteCount) {
		var ret int32
		return ret
	}
	return *o.AthleteCount
}

// GetAthleteCountOk returns a tuple with the AthleteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetAthleteCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AthleteCount) {
		return nil, false
	}
	return o.AthleteCount, true
}

// HasAthleteCount returns a boolean if a field has been set.
func (o *SummaryActivity) HasAthleteCount() bool {
	if o != nil && !IsNil(o.AthleteCount) {
		return true
	}

	return false
}

// SetAthleteCount gets a reference to the given int32 and assigns it to the AthleteCount field.
func (o *SummaryActivity) SetAthleteCount(v int32) {
	o.AthleteCount = &v
}

// GetPhotoCount returns the PhotoCount field value if set, zero value otherwise.
func (o *SummaryActivity) GetPhotoCount() int32 {
	if o == nil || IsNil(o.PhotoCount) {
		var ret int32
		return ret
	}
	return *o.PhotoCount
}

// GetPhotoCountOk returns a tuple with the PhotoCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetPhotoCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PhotoCount) {
		return nil, false
	}
	return o.PhotoCount, true
}

// HasPhotoCount returns a boolean if a field has been set.
func (o *SummaryActivity) HasPhotoCount() bool {
	if o != nil && !IsNil(o.PhotoCount) {
		return true
	}

	return false
}

// SetPhotoCount gets a reference to the given int32 and assigns it to the PhotoCount field.
func (o *SummaryActivity) SetPhotoCount(v int32) {
	o.PhotoCount = &v
}

// GetTotalPhotoCount returns the TotalPhotoCount field value if set, zero value otherwise.
func (o *SummaryActivity) GetTotalPhotoCount() int32 {
	if o == nil || IsNil(o.TotalPhotoCount) {
		var ret int32
		return ret
	}
	return *o.TotalPhotoCount
}

// GetTotalPhotoCountOk returns a tuple with the TotalPhotoCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetTotalPhotoCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPhotoCount) {
		return nil, false
	}
	return o.TotalPhotoCount, true
}

// HasTotalPhotoCount returns a boolean if a field has been set.
func (o *SummaryActivity) HasTotalPhotoCount() bool {
	if o != nil && !IsNil(o.TotalPhotoCount) {
		return true
	}

	return false
}

// SetTotalPhotoCount gets a reference to the given int32 and assigns it to the TotalPhotoCount field.
func (o *SummaryActivity) SetTotalPhotoCount(v int32) {
	o.TotalPhotoCount = &v
}

// GetMap returns the Map field value if set, zero value otherwise.
func (o *SummaryActivity) GetMap() PolylineMap {
	if o == nil || IsNil(o.Map) {
		var ret PolylineMap
		return ret
	}
	return *o.Map
}

// GetMapOk returns a tuple with the Map field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetMapOk() (*PolylineMap, bool) {
	if o == nil || IsNil(o.Map) {
		return nil, false
	}
	return o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *SummaryActivity) HasMap() bool {
	if o != nil && !IsNil(o.Map) {
		return true
	}

	return false
}

// SetMap gets a reference to the given PolylineMap and assigns it to the Map field.
func (o *SummaryActivity) SetMap(v PolylineMap) {
	o.Map = &v
}

// GetTrainer returns the Trainer field value if set, zero value otherwise.
func (o *SummaryActivity) GetTrainer() bool {
	if o == nil || IsNil(o.Trainer) {
		var ret bool
		return ret
	}
	return *o.Trainer
}

// GetTrainerOk returns a tuple with the Trainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetTrainerOk() (*bool, bool) {
	if o == nil || IsNil(o.Trainer) {
		return nil, false
	}
	return o.Trainer, true
}

// HasTrainer returns a boolean if a field has been set.
func (o *SummaryActivity) HasTrainer() bool {
	if o != nil && !IsNil(o.Trainer) {
		return true
	}

	return false
}

// SetTrainer gets a reference to the given bool and assigns it to the Trainer field.
func (o *SummaryActivity) SetTrainer(v bool) {
	o.Trainer = &v
}

// GetCommute returns the Commute field value if set, zero value otherwise.
func (o *SummaryActivity) GetCommute() bool {
	if o == nil || IsNil(o.Commute) {
		var ret bool
		return ret
	}
	return *o.Commute
}

// GetCommuteOk returns a tuple with the Commute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetCommuteOk() (*bool, bool) {
	if o == nil || IsNil(o.Commute) {
		return nil, false
	}
	return o.Commute, true
}

// HasCommute returns a boolean if a field has been set.
func (o *SummaryActivity) HasCommute() bool {
	if o != nil && !IsNil(o.Commute) {
		return true
	}

	return false
}

// SetCommute gets a reference to the given bool and assigns it to the Commute field.
func (o *SummaryActivity) SetCommute(v bool) {
	o.Commute = &v
}

// GetManual returns the Manual field value if set, zero value otherwise.
func (o *SummaryActivity) GetManual() bool {
	if o == nil || IsNil(o.Manual) {
		var ret bool
		return ret
	}
	return *o.Manual
}

// GetManualOk returns a tuple with the Manual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetManualOk() (*bool, bool) {
	if o == nil || IsNil(o.Manual) {
		return nil, false
	}
	return o.Manual, true
}

// HasManual returns a boolean if a field has been set.
func (o *SummaryActivity) HasManual() bool {
	if o != nil && !IsNil(o.Manual) {
		return true
	}

	return false
}

// SetManual gets a reference to the given bool and assigns it to the Manual field.
func (o *SummaryActivity) SetManual(v bool) {
	o.Manual = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *SummaryActivity) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *SummaryActivity) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *SummaryActivity) SetPrivate(v bool) {
	o.Private = &v
}

// GetFlagged returns the Flagged field value if set, zero value otherwise.
func (o *SummaryActivity) GetFlagged() bool {
	if o == nil || IsNil(o.Flagged) {
		var ret bool
		return ret
	}
	return *o.Flagged
}

// GetFlaggedOk returns a tuple with the Flagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetFlaggedOk() (*bool, bool) {
	if o == nil || IsNil(o.Flagged) {
		return nil, false
	}
	return o.Flagged, true
}

// HasFlagged returns a boolean if a field has been set.
func (o *SummaryActivity) HasFlagged() bool {
	if o != nil && !IsNil(o.Flagged) {
		return true
	}

	return false
}

// SetFlagged gets a reference to the given bool and assigns it to the Flagged field.
func (o *SummaryActivity) SetFlagged(v bool) {
	o.Flagged = &v
}

// GetWorkoutType returns the WorkoutType field value if set, zero value otherwise.
func (o *SummaryActivity) GetWorkoutType() int32 {
	if o == nil || IsNil(o.WorkoutType) {
		var ret int32
		return ret
	}
	return *o.WorkoutType
}

// GetWorkoutTypeOk returns a tuple with the WorkoutType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetWorkoutTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.WorkoutType) {
		return nil, false
	}
	return o.WorkoutType, true
}

// HasWorkoutType returns a boolean if a field has been set.
func (o *SummaryActivity) HasWorkoutType() bool {
	if o != nil && !IsNil(o.WorkoutType) {
		return true
	}

	return false
}

// SetWorkoutType gets a reference to the given int32 and assigns it to the WorkoutType field.
func (o *SummaryActivity) SetWorkoutType(v int32) {
	o.WorkoutType = &v
}

// GetUploadIdStr returns the UploadIdStr field value if set, zero value otherwise.
func (o *SummaryActivity) GetUploadIdStr() string {
	if o == nil || IsNil(o.UploadIdStr) {
		var ret string
		return ret
	}
	return *o.UploadIdStr
}

// GetUploadIdStrOk returns a tuple with the UploadIdStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetUploadIdStrOk() (*string, bool) {
	if o == nil || IsNil(o.UploadIdStr) {
		return nil, false
	}
	return o.UploadIdStr, true
}

// HasUploadIdStr returns a boolean if a field has been set.
func (o *SummaryActivity) HasUploadIdStr() bool {
	if o != nil && !IsNil(o.UploadIdStr) {
		return true
	}

	return false
}

// SetUploadIdStr gets a reference to the given string and assigns it to the UploadIdStr field.
func (o *SummaryActivity) SetUploadIdStr(v string) {
	o.UploadIdStr = &v
}

// GetAverageSpeed returns the AverageSpeed field value if set, zero value otherwise.
func (o *SummaryActivity) GetAverageSpeed() float32 {
	if o == nil || IsNil(o.AverageSpeed) {
		var ret float32
		return ret
	}
	return *o.AverageSpeed
}

// GetAverageSpeedOk returns a tuple with the AverageSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetAverageSpeedOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageSpeed) {
		return nil, false
	}
	return o.AverageSpeed, true
}

// HasAverageSpeed returns a boolean if a field has been set.
func (o *SummaryActivity) HasAverageSpeed() bool {
	if o != nil && !IsNil(o.AverageSpeed) {
		return true
	}

	return false
}

// SetAverageSpeed gets a reference to the given float32 and assigns it to the AverageSpeed field.
func (o *SummaryActivity) SetAverageSpeed(v float32) {
	o.AverageSpeed = &v
}

// GetMaxSpeed returns the MaxSpeed field value if set, zero value otherwise.
func (o *SummaryActivity) GetMaxSpeed() float32 {
	if o == nil || IsNil(o.MaxSpeed) {
		var ret float32
		return ret
	}
	return *o.MaxSpeed
}

// GetMaxSpeedOk returns a tuple with the MaxSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetMaxSpeedOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxSpeed) {
		return nil, false
	}
	return o.MaxSpeed, true
}

// HasMaxSpeed returns a boolean if a field has been set.
func (o *SummaryActivity) HasMaxSpeed() bool {
	if o != nil && !IsNil(o.MaxSpeed) {
		return true
	}

	return false
}

// SetMaxSpeed gets a reference to the given float32 and assigns it to the MaxSpeed field.
func (o *SummaryActivity) SetMaxSpeed(v float32) {
	o.MaxSpeed = &v
}

// GetHasKudoed returns the HasKudoed field value if set, zero value otherwise.
func (o *SummaryActivity) GetHasKudoed() bool {
	if o == nil || IsNil(o.HasKudoed) {
		var ret bool
		return ret
	}
	return *o.HasKudoed
}

// GetHasKudoedOk returns a tuple with the HasKudoed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetHasKudoedOk() (*bool, bool) {
	if o == nil || IsNil(o.HasKudoed) {
		return nil, false
	}
	return o.HasKudoed, true
}

// HasHasKudoed returns a boolean if a field has been set.
func (o *SummaryActivity) HasHasKudoed() bool {
	if o != nil && !IsNil(o.HasKudoed) {
		return true
	}

	return false
}

// SetHasKudoed gets a reference to the given bool and assigns it to the HasKudoed field.
func (o *SummaryActivity) SetHasKudoed(v bool) {
	o.HasKudoed = &v
}

// GetHideFromHome returns the HideFromHome field value if set, zero value otherwise.
func (o *SummaryActivity) GetHideFromHome() bool {
	if o == nil || IsNil(o.HideFromHome) {
		var ret bool
		return ret
	}
	return *o.HideFromHome
}

// GetHideFromHomeOk returns a tuple with the HideFromHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetHideFromHomeOk() (*bool, bool) {
	if o == nil || IsNil(o.HideFromHome) {
		return nil, false
	}
	return o.HideFromHome, true
}

// HasHideFromHome returns a boolean if a field has been set.
func (o *SummaryActivity) HasHideFromHome() bool {
	if o != nil && !IsNil(o.HideFromHome) {
		return true
	}

	return false
}

// SetHideFromHome gets a reference to the given bool and assigns it to the HideFromHome field.
func (o *SummaryActivity) SetHideFromHome(v bool) {
	o.HideFromHome = &v
}

// GetGearId returns the GearId field value if set, zero value otherwise.
func (o *SummaryActivity) GetGearId() string {
	if o == nil || IsNil(o.GearId) {
		var ret string
		return ret
	}
	return *o.GearId
}

// GetGearIdOk returns a tuple with the GearId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetGearIdOk() (*string, bool) {
	if o == nil || IsNil(o.GearId) {
		return nil, false
	}
	return o.GearId, true
}

// HasGearId returns a boolean if a field has been set.
func (o *SummaryActivity) HasGearId() bool {
	if o != nil && !IsNil(o.GearId) {
		return true
	}

	return false
}

// SetGearId gets a reference to the given string and assigns it to the GearId field.
func (o *SummaryActivity) SetGearId(v string) {
	o.GearId = &v
}

// GetKilojoules returns the Kilojoules field value if set, zero value otherwise.
func (o *SummaryActivity) GetKilojoules() float32 {
	if o == nil || IsNil(o.Kilojoules) {
		var ret float32
		return ret
	}
	return *o.Kilojoules
}

// GetKilojoulesOk returns a tuple with the Kilojoules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetKilojoulesOk() (*float32, bool) {
	if o == nil || IsNil(o.Kilojoules) {
		return nil, false
	}
	return o.Kilojoules, true
}

// HasKilojoules returns a boolean if a field has been set.
func (o *SummaryActivity) HasKilojoules() bool {
	if o != nil && !IsNil(o.Kilojoules) {
		return true
	}

	return false
}

// SetKilojoules gets a reference to the given float32 and assigns it to the Kilojoules field.
func (o *SummaryActivity) SetKilojoules(v float32) {
	o.Kilojoules = &v
}

// GetAverageWatts returns the AverageWatts field value if set, zero value otherwise.
func (o *SummaryActivity) GetAverageWatts() float32 {
	if o == nil || IsNil(o.AverageWatts) {
		var ret float32
		return ret
	}
	return *o.AverageWatts
}

// GetAverageWattsOk returns a tuple with the AverageWatts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetAverageWattsOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageWatts) {
		return nil, false
	}
	return o.AverageWatts, true
}

// HasAverageWatts returns a boolean if a field has been set.
func (o *SummaryActivity) HasAverageWatts() bool {
	if o != nil && !IsNil(o.AverageWatts) {
		return true
	}

	return false
}

// SetAverageWatts gets a reference to the given float32 and assigns it to the AverageWatts field.
func (o *SummaryActivity) SetAverageWatts(v float32) {
	o.AverageWatts = &v
}

// GetDeviceWatts returns the DeviceWatts field value if set, zero value otherwise.
func (o *SummaryActivity) GetDeviceWatts() bool {
	if o == nil || IsNil(o.DeviceWatts) {
		var ret bool
		return ret
	}
	return *o.DeviceWatts
}

// GetDeviceWattsOk returns a tuple with the DeviceWatts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetDeviceWattsOk() (*bool, bool) {
	if o == nil || IsNil(o.DeviceWatts) {
		return nil, false
	}
	return o.DeviceWatts, true
}

// HasDeviceWatts returns a boolean if a field has been set.
func (o *SummaryActivity) HasDeviceWatts() bool {
	if o != nil && !IsNil(o.DeviceWatts) {
		return true
	}

	return false
}

// SetDeviceWatts gets a reference to the given bool and assigns it to the DeviceWatts field.
func (o *SummaryActivity) SetDeviceWatts(v bool) {
	o.DeviceWatts = &v
}

// GetMaxWatts returns the MaxWatts field value if set, zero value otherwise.
func (o *SummaryActivity) GetMaxWatts() int32 {
	if o == nil || IsNil(o.MaxWatts) {
		var ret int32
		return ret
	}
	return *o.MaxWatts
}

// GetMaxWattsOk returns a tuple with the MaxWatts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetMaxWattsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxWatts) {
		return nil, false
	}
	return o.MaxWatts, true
}

// HasMaxWatts returns a boolean if a field has been set.
func (o *SummaryActivity) HasMaxWatts() bool {
	if o != nil && !IsNil(o.MaxWatts) {
		return true
	}

	return false
}

// SetMaxWatts gets a reference to the given int32 and assigns it to the MaxWatts field.
func (o *SummaryActivity) SetMaxWatts(v int32) {
	o.MaxWatts = &v
}

// GetWeightedAverageWatts returns the WeightedAverageWatts field value if set, zero value otherwise.
func (o *SummaryActivity) GetWeightedAverageWatts() int32 {
	if o == nil || IsNil(o.WeightedAverageWatts) {
		var ret int32
		return ret
	}
	return *o.WeightedAverageWatts
}

// GetWeightedAverageWattsOk returns a tuple with the WeightedAverageWatts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryActivity) GetWeightedAverageWattsOk() (*int32, bool) {
	if o == nil || IsNil(o.WeightedAverageWatts) {
		return nil, false
	}
	return o.WeightedAverageWatts, true
}

// HasWeightedAverageWatts returns a boolean if a field has been set.
func (o *SummaryActivity) HasWeightedAverageWatts() bool {
	if o != nil && !IsNil(o.WeightedAverageWatts) {
		return true
	}

	return false
}

// SetWeightedAverageWatts gets a reference to the given int32 and assigns it to the WeightedAverageWatts field.
func (o *SummaryActivity) SetWeightedAverageWatts(v int32) {
	o.WeightedAverageWatts = &v
}

func (o SummaryActivity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SummaryActivity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.UploadId) {
		toSerialize["upload_id"] = o.UploadId
	}
	if !IsNil(o.Athlete) {
		toSerialize["athlete"] = o.Athlete
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.MovingTime) {
		toSerialize["moving_time"] = o.MovingTime
	}
	if !IsNil(o.ElapsedTime) {
		toSerialize["elapsed_time"] = o.ElapsedTime
	}
	if !IsNil(o.TotalElevationGain) {
		toSerialize["total_elevation_gain"] = o.TotalElevationGain
	}
	if !IsNil(o.ElevHigh) {
		toSerialize["elev_high"] = o.ElevHigh
	}
	if !IsNil(o.ElevLow) {
		toSerialize["elev_low"] = o.ElevLow
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SportType) {
		toSerialize["sport_type"] = o.SportType
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.StartDateLocal) {
		toSerialize["start_date_local"] = o.StartDateLocal
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.StartLatlng) {
		toSerialize["start_latlng"] = o.StartLatlng
	}
	if !IsNil(o.EndLatlng) {
		toSerialize["end_latlng"] = o.EndLatlng
	}
	if !IsNil(o.AchievementCount) {
		toSerialize["achievement_count"] = o.AchievementCount
	}
	if !IsNil(o.KudosCount) {
		toSerialize["kudos_count"] = o.KudosCount
	}
	if !IsNil(o.CommentCount) {
		toSerialize["comment_count"] = o.CommentCount
	}
	if !IsNil(o.AthleteCount) {
		toSerialize["athlete_count"] = o.AthleteCount
	}
	if !IsNil(o.PhotoCount) {
		toSerialize["photo_count"] = o.PhotoCount
	}
	if !IsNil(o.TotalPhotoCount) {
		toSerialize["total_photo_count"] = o.TotalPhotoCount
	}
	if !IsNil(o.Map) {
		toSerialize["map"] = o.Map
	}
	if !IsNil(o.Trainer) {
		toSerialize["trainer"] = o.Trainer
	}
	if !IsNil(o.Commute) {
		toSerialize["commute"] = o.Commute
	}
	if !IsNil(o.Manual) {
		toSerialize["manual"] = o.Manual
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.Flagged) {
		toSerialize["flagged"] = o.Flagged
	}
	if !IsNil(o.WorkoutType) {
		toSerialize["workout_type"] = o.WorkoutType
	}
	if !IsNil(o.UploadIdStr) {
		toSerialize["upload_id_str"] = o.UploadIdStr
	}
	if !IsNil(o.AverageSpeed) {
		toSerialize["average_speed"] = o.AverageSpeed
	}
	if !IsNil(o.MaxSpeed) {
		toSerialize["max_speed"] = o.MaxSpeed
	}
	if !IsNil(o.HasKudoed) {
		toSerialize["has_kudoed"] = o.HasKudoed
	}
	if !IsNil(o.HideFromHome) {
		toSerialize["hide_from_home"] = o.HideFromHome
	}
	if !IsNil(o.GearId) {
		toSerialize["gear_id"] = o.GearId
	}
	if !IsNil(o.Kilojoules) {
		toSerialize["kilojoules"] = o.Kilojoules
	}
	if !IsNil(o.AverageWatts) {
		toSerialize["average_watts"] = o.AverageWatts
	}
	if !IsNil(o.DeviceWatts) {
		toSerialize["device_watts"] = o.DeviceWatts
	}
	if !IsNil(o.MaxWatts) {
		toSerialize["max_watts"] = o.MaxWatts
	}
	if !IsNil(o.WeightedAverageWatts) {
		toSerialize["weighted_average_watts"] = o.WeightedAverageWatts
	}
	return toSerialize, nil
}

type NullableSummaryActivity struct {
	value *SummaryActivity
	isSet bool
}

func (v NullableSummaryActivity) Get() *SummaryActivity {
	return v.value
}

func (v *NullableSummaryActivity) Set(val *SummaryActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryActivity(val *SummaryActivity) *NullableSummaryActivity {
	return &NullableSummaryActivity{value: val, isSet: true}
}

func (v NullableSummaryActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


