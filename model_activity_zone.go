/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the ActivityZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityZone{}

// ActivityZone struct for ActivityZone
type ActivityZone struct {
	Score *int32 `json:"score,omitempty"`
	// Stores the exclusive ranges representing zones and the time spent in each.
	DistributionBuckets []TimedZoneRange `json:"distribution_buckets,omitempty"`
	Type *string `json:"type,omitempty"`
	SensorBased *bool `json:"sensor_based,omitempty"`
	Points *int32 `json:"points,omitempty"`
	CustomZones *bool `json:"custom_zones,omitempty"`
	Max *int32 `json:"max,omitempty"`
}

// NewActivityZone instantiates a new ActivityZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityZone() *ActivityZone {
	this := ActivityZone{}
	return &this
}

// NewActivityZoneWithDefaults instantiates a new ActivityZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityZoneWithDefaults() *ActivityZone {
	this := ActivityZone{}
	return &this
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *ActivityZone) GetScore() int32 {
	if o == nil || IsNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityZone) GetScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *ActivityZone) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *ActivityZone) SetScore(v int32) {
	o.Score = &v
}

// GetDistributionBuckets returns the DistributionBuckets field value if set, zero value otherwise.
func (o *ActivityZone) GetDistributionBuckets() []TimedZoneRange {
	if o == nil || IsNil(o.DistributionBuckets) {
		var ret []TimedZoneRange
		return ret
	}
	return o.DistributionBuckets
}

// GetDistributionBucketsOk returns a tuple with the DistributionBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityZone) GetDistributionBucketsOk() ([]TimedZoneRange, bool) {
	if o == nil || IsNil(o.DistributionBuckets) {
		return nil, false
	}
	return o.DistributionBuckets, true
}

// HasDistributionBuckets returns a boolean if a field has been set.
func (o *ActivityZone) HasDistributionBuckets() bool {
	if o != nil && !IsNil(o.DistributionBuckets) {
		return true
	}

	return false
}

// SetDistributionBuckets gets a reference to the given []TimedZoneRange and assigns it to the DistributionBuckets field.
func (o *ActivityZone) SetDistributionBuckets(v []TimedZoneRange) {
	o.DistributionBuckets = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ActivityZone) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityZone) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ActivityZone) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ActivityZone) SetType(v string) {
	o.Type = &v
}

// GetSensorBased returns the SensorBased field value if set, zero value otherwise.
func (o *ActivityZone) GetSensorBased() bool {
	if o == nil || IsNil(o.SensorBased) {
		var ret bool
		return ret
	}
	return *o.SensorBased
}

// GetSensorBasedOk returns a tuple with the SensorBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityZone) GetSensorBasedOk() (*bool, bool) {
	if o == nil || IsNil(o.SensorBased) {
		return nil, false
	}
	return o.SensorBased, true
}

// HasSensorBased returns a boolean if a field has been set.
func (o *ActivityZone) HasSensorBased() bool {
	if o != nil && !IsNil(o.SensorBased) {
		return true
	}

	return false
}

// SetSensorBased gets a reference to the given bool and assigns it to the SensorBased field.
func (o *ActivityZone) SetSensorBased(v bool) {
	o.SensorBased = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *ActivityZone) GetPoints() int32 {
	if o == nil || IsNil(o.Points) {
		var ret int32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityZone) GetPointsOk() (*int32, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *ActivityZone) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given int32 and assigns it to the Points field.
func (o *ActivityZone) SetPoints(v int32) {
	o.Points = &v
}

// GetCustomZones returns the CustomZones field value if set, zero value otherwise.
func (o *ActivityZone) GetCustomZones() bool {
	if o == nil || IsNil(o.CustomZones) {
		var ret bool
		return ret
	}
	return *o.CustomZones
}

// GetCustomZonesOk returns a tuple with the CustomZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityZone) GetCustomZonesOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomZones) {
		return nil, false
	}
	return o.CustomZones, true
}

// HasCustomZones returns a boolean if a field has been set.
func (o *ActivityZone) HasCustomZones() bool {
	if o != nil && !IsNil(o.CustomZones) {
		return true
	}

	return false
}

// SetCustomZones gets a reference to the given bool and assigns it to the CustomZones field.
func (o *ActivityZone) SetCustomZones(v bool) {
	o.CustomZones = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *ActivityZone) GetMax() int32 {
	if o == nil || IsNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityZone) GetMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *ActivityZone) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *ActivityZone) SetMax(v int32) {
	o.Max = &v
}

func (o ActivityZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.DistributionBuckets) {
		toSerialize["distribution_buckets"] = o.DistributionBuckets
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SensorBased) {
		toSerialize["sensor_based"] = o.SensorBased
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.CustomZones) {
		toSerialize["custom_zones"] = o.CustomZones
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	return toSerialize, nil
}

type NullableActivityZone struct {
	value *ActivityZone
	isSet bool
}

func (v NullableActivityZone) Get() *ActivityZone {
	return v.value
}

func (v *NullableActivityZone) Set(val *ActivityZone) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityZone) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityZone(val *ActivityZone) *NullableActivityZone {
	return &NullableActivityZone{value: val, isSet: true}
}

func (v NullableActivityZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


