/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
	"time"
)

// checks if the DetailedAthlete type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailedAthlete{}

// DetailedAthlete struct for DetailedAthlete
type DetailedAthlete struct {
	// The unique identifier of the athlete
	Id *int64 `json:"id,omitempty"`
	// Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
	ResourceState *int32 `json:"resource_state,omitempty"`
	// The athlete's first name.
	Firstname *string `json:"firstname,omitempty"`
	// The athlete's last name.
	Lastname *string `json:"lastname,omitempty"`
	// URL to a 62x62 pixel profile picture.
	ProfileMedium *string `json:"profile_medium,omitempty"`
	// URL to a 124x124 pixel profile picture.
	Profile *string `json:"profile,omitempty"`
	// The athlete's city.
	City *string `json:"city,omitempty"`
	// The athlete's state or geographical region.
	State *string `json:"state,omitempty"`
	// The athlete's country.
	Country *string `json:"country,omitempty"`
	// The athlete's sex.
	Sex *string `json:"sex,omitempty"`
	// Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
	Premium *bool `json:"premium,omitempty"`
	// Whether the athlete has any Summit subscription.
	Summit *bool `json:"summit,omitempty"`
	// The time at which the athlete was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The time at which the athlete was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The athlete's follower count.
	FollowerCount *int32 `json:"follower_count,omitempty"`
	// The athlete's friend count.
	FriendCount *int32 `json:"friend_count,omitempty"`
	// The athlete's preferred unit system.
	MeasurementPreference *string `json:"measurement_preference,omitempty"`
	// The athlete's FTP (Functional Threshold Power).
	Ftp *int32 `json:"ftp,omitempty"`
	// The athlete's weight.
	Weight *float32 `json:"weight,omitempty"`
	// The athlete's clubs.
	Clubs []SummaryClub `json:"clubs,omitempty"`
	// The athlete's bikes.
	Bikes []SummaryGear `json:"bikes,omitempty"`
	// The athlete's shoes.
	Shoes []SummaryGear `json:"shoes,omitempty"`
}

// NewDetailedAthlete instantiates a new DetailedAthlete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedAthlete() *DetailedAthlete {
	this := DetailedAthlete{}
	return &this
}

// NewDetailedAthleteWithDefaults instantiates a new DetailedAthlete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedAthleteWithDefaults() *DetailedAthlete {
	this := DetailedAthlete{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DetailedAthlete) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DetailedAthlete) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DetailedAthlete) SetId(v int64) {
	o.Id = &v
}

// GetResourceState returns the ResourceState field value if set, zero value otherwise.
func (o *DetailedAthlete) GetResourceState() int32 {
	if o == nil || IsNil(o.ResourceState) {
		var ret int32
		return ret
	}
	return *o.ResourceState
}

// GetResourceStateOk returns a tuple with the ResourceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetResourceStateOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourceState) {
		return nil, false
	}
	return o.ResourceState, true
}

// HasResourceState returns a boolean if a field has been set.
func (o *DetailedAthlete) HasResourceState() bool {
	if o != nil && !IsNil(o.ResourceState) {
		return true
	}

	return false
}

// SetResourceState gets a reference to the given int32 and assigns it to the ResourceState field.
func (o *DetailedAthlete) SetResourceState(v int32) {
	o.ResourceState = &v
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *DetailedAthlete) GetFirstname() string {
	if o == nil || IsNil(o.Firstname) {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.Firstname) {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *DetailedAthlete) HasFirstname() bool {
	if o != nil && !IsNil(o.Firstname) {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *DetailedAthlete) SetFirstname(v string) {
	o.Firstname = &v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *DetailedAthlete) GetLastname() string {
	if o == nil || IsNil(o.Lastname) {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetLastnameOk() (*string, bool) {
	if o == nil || IsNil(o.Lastname) {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *DetailedAthlete) HasLastname() bool {
	if o != nil && !IsNil(o.Lastname) {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *DetailedAthlete) SetLastname(v string) {
	o.Lastname = &v
}

// GetProfileMedium returns the ProfileMedium field value if set, zero value otherwise.
func (o *DetailedAthlete) GetProfileMedium() string {
	if o == nil || IsNil(o.ProfileMedium) {
		var ret string
		return ret
	}
	return *o.ProfileMedium
}

// GetProfileMediumOk returns a tuple with the ProfileMedium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetProfileMediumOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileMedium) {
		return nil, false
	}
	return o.ProfileMedium, true
}

// HasProfileMedium returns a boolean if a field has been set.
func (o *DetailedAthlete) HasProfileMedium() bool {
	if o != nil && !IsNil(o.ProfileMedium) {
		return true
	}

	return false
}

// SetProfileMedium gets a reference to the given string and assigns it to the ProfileMedium field.
func (o *DetailedAthlete) SetProfileMedium(v string) {
	o.ProfileMedium = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *DetailedAthlete) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *DetailedAthlete) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *DetailedAthlete) SetProfile(v string) {
	o.Profile = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *DetailedAthlete) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *DetailedAthlete) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *DetailedAthlete) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DetailedAthlete) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DetailedAthlete) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DetailedAthlete) SetState(v string) {
	o.State = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *DetailedAthlete) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *DetailedAthlete) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *DetailedAthlete) SetCountry(v string) {
	o.Country = &v
}

// GetSex returns the Sex field value if set, zero value otherwise.
func (o *DetailedAthlete) GetSex() string {
	if o == nil || IsNil(o.Sex) {
		var ret string
		return ret
	}
	return *o.Sex
}

// GetSexOk returns a tuple with the Sex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetSexOk() (*string, bool) {
	if o == nil || IsNil(o.Sex) {
		return nil, false
	}
	return o.Sex, true
}

// HasSex returns a boolean if a field has been set.
func (o *DetailedAthlete) HasSex() bool {
	if o != nil && !IsNil(o.Sex) {
		return true
	}

	return false
}

// SetSex gets a reference to the given string and assigns it to the Sex field.
func (o *DetailedAthlete) SetSex(v string) {
	o.Sex = &v
}

// GetPremium returns the Premium field value if set, zero value otherwise.
func (o *DetailedAthlete) GetPremium() bool {
	if o == nil || IsNil(o.Premium) {
		var ret bool
		return ret
	}
	return *o.Premium
}

// GetPremiumOk returns a tuple with the Premium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetPremiumOk() (*bool, bool) {
	if o == nil || IsNil(o.Premium) {
		return nil, false
	}
	return o.Premium, true
}

// HasPremium returns a boolean if a field has been set.
func (o *DetailedAthlete) HasPremium() bool {
	if o != nil && !IsNil(o.Premium) {
		return true
	}

	return false
}

// SetPremium gets a reference to the given bool and assigns it to the Premium field.
func (o *DetailedAthlete) SetPremium(v bool) {
	o.Premium = &v
}

// GetSummit returns the Summit field value if set, zero value otherwise.
func (o *DetailedAthlete) GetSummit() bool {
	if o == nil || IsNil(o.Summit) {
		var ret bool
		return ret
	}
	return *o.Summit
}

// GetSummitOk returns a tuple with the Summit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetSummitOk() (*bool, bool) {
	if o == nil || IsNil(o.Summit) {
		return nil, false
	}
	return o.Summit, true
}

// HasSummit returns a boolean if a field has been set.
func (o *DetailedAthlete) HasSummit() bool {
	if o != nil && !IsNil(o.Summit) {
		return true
	}

	return false
}

// SetSummit gets a reference to the given bool and assigns it to the Summit field.
func (o *DetailedAthlete) SetSummit(v bool) {
	o.Summit = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DetailedAthlete) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DetailedAthlete) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DetailedAthlete) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DetailedAthlete) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DetailedAthlete) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DetailedAthlete) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetFollowerCount returns the FollowerCount field value if set, zero value otherwise.
func (o *DetailedAthlete) GetFollowerCount() int32 {
	if o == nil || IsNil(o.FollowerCount) {
		var ret int32
		return ret
	}
	return *o.FollowerCount
}

// GetFollowerCountOk returns a tuple with the FollowerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetFollowerCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FollowerCount) {
		return nil, false
	}
	return o.FollowerCount, true
}

// HasFollowerCount returns a boolean if a field has been set.
func (o *DetailedAthlete) HasFollowerCount() bool {
	if o != nil && !IsNil(o.FollowerCount) {
		return true
	}

	return false
}

// SetFollowerCount gets a reference to the given int32 and assigns it to the FollowerCount field.
func (o *DetailedAthlete) SetFollowerCount(v int32) {
	o.FollowerCount = &v
}

// GetFriendCount returns the FriendCount field value if set, zero value otherwise.
func (o *DetailedAthlete) GetFriendCount() int32 {
	if o == nil || IsNil(o.FriendCount) {
		var ret int32
		return ret
	}
	return *o.FriendCount
}

// GetFriendCountOk returns a tuple with the FriendCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetFriendCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FriendCount) {
		return nil, false
	}
	return o.FriendCount, true
}

// HasFriendCount returns a boolean if a field has been set.
func (o *DetailedAthlete) HasFriendCount() bool {
	if o != nil && !IsNil(o.FriendCount) {
		return true
	}

	return false
}

// SetFriendCount gets a reference to the given int32 and assigns it to the FriendCount field.
func (o *DetailedAthlete) SetFriendCount(v int32) {
	o.FriendCount = &v
}

// GetMeasurementPreference returns the MeasurementPreference field value if set, zero value otherwise.
func (o *DetailedAthlete) GetMeasurementPreference() string {
	if o == nil || IsNil(o.MeasurementPreference) {
		var ret string
		return ret
	}
	return *o.MeasurementPreference
}

// GetMeasurementPreferenceOk returns a tuple with the MeasurementPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetMeasurementPreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.MeasurementPreference) {
		return nil, false
	}
	return o.MeasurementPreference, true
}

// HasMeasurementPreference returns a boolean if a field has been set.
func (o *DetailedAthlete) HasMeasurementPreference() bool {
	if o != nil && !IsNil(o.MeasurementPreference) {
		return true
	}

	return false
}

// SetMeasurementPreference gets a reference to the given string and assigns it to the MeasurementPreference field.
func (o *DetailedAthlete) SetMeasurementPreference(v string) {
	o.MeasurementPreference = &v
}

// GetFtp returns the Ftp field value if set, zero value otherwise.
func (o *DetailedAthlete) GetFtp() int32 {
	if o == nil || IsNil(o.Ftp) {
		var ret int32
		return ret
	}
	return *o.Ftp
}

// GetFtpOk returns a tuple with the Ftp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetFtpOk() (*int32, bool) {
	if o == nil || IsNil(o.Ftp) {
		return nil, false
	}
	return o.Ftp, true
}

// HasFtp returns a boolean if a field has been set.
func (o *DetailedAthlete) HasFtp() bool {
	if o != nil && !IsNil(o.Ftp) {
		return true
	}

	return false
}

// SetFtp gets a reference to the given int32 and assigns it to the Ftp field.
func (o *DetailedAthlete) SetFtp(v int32) {
	o.Ftp = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *DetailedAthlete) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *DetailedAthlete) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *DetailedAthlete) SetWeight(v float32) {
	o.Weight = &v
}

// GetClubs returns the Clubs field value if set, zero value otherwise.
func (o *DetailedAthlete) GetClubs() []SummaryClub {
	if o == nil || IsNil(o.Clubs) {
		var ret []SummaryClub
		return ret
	}
	return o.Clubs
}

// GetClubsOk returns a tuple with the Clubs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetClubsOk() ([]SummaryClub, bool) {
	if o == nil || IsNil(o.Clubs) {
		return nil, false
	}
	return o.Clubs, true
}

// HasClubs returns a boolean if a field has been set.
func (o *DetailedAthlete) HasClubs() bool {
	if o != nil && !IsNil(o.Clubs) {
		return true
	}

	return false
}

// SetClubs gets a reference to the given []SummaryClub and assigns it to the Clubs field.
func (o *DetailedAthlete) SetClubs(v []SummaryClub) {
	o.Clubs = v
}

// GetBikes returns the Bikes field value if set, zero value otherwise.
func (o *DetailedAthlete) GetBikes() []SummaryGear {
	if o == nil || IsNil(o.Bikes) {
		var ret []SummaryGear
		return ret
	}
	return o.Bikes
}

// GetBikesOk returns a tuple with the Bikes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetBikesOk() ([]SummaryGear, bool) {
	if o == nil || IsNil(o.Bikes) {
		return nil, false
	}
	return o.Bikes, true
}

// HasBikes returns a boolean if a field has been set.
func (o *DetailedAthlete) HasBikes() bool {
	if o != nil && !IsNil(o.Bikes) {
		return true
	}

	return false
}

// SetBikes gets a reference to the given []SummaryGear and assigns it to the Bikes field.
func (o *DetailedAthlete) SetBikes(v []SummaryGear) {
	o.Bikes = v
}

// GetShoes returns the Shoes field value if set, zero value otherwise.
func (o *DetailedAthlete) GetShoes() []SummaryGear {
	if o == nil || IsNil(o.Shoes) {
		var ret []SummaryGear
		return ret
	}
	return o.Shoes
}

// GetShoesOk returns a tuple with the Shoes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedAthlete) GetShoesOk() ([]SummaryGear, bool) {
	if o == nil || IsNil(o.Shoes) {
		return nil, false
	}
	return o.Shoes, true
}

// HasShoes returns a boolean if a field has been set.
func (o *DetailedAthlete) HasShoes() bool {
	if o != nil && !IsNil(o.Shoes) {
		return true
	}

	return false
}

// SetShoes gets a reference to the given []SummaryGear and assigns it to the Shoes field.
func (o *DetailedAthlete) SetShoes(v []SummaryGear) {
	o.Shoes = v
}

func (o DetailedAthlete) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailedAthlete) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ResourceState) {
		toSerialize["resource_state"] = o.ResourceState
	}
	if !IsNil(o.Firstname) {
		toSerialize["firstname"] = o.Firstname
	}
	if !IsNil(o.Lastname) {
		toSerialize["lastname"] = o.Lastname
	}
	if !IsNil(o.ProfileMedium) {
		toSerialize["profile_medium"] = o.ProfileMedium
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Sex) {
		toSerialize["sex"] = o.Sex
	}
	if !IsNil(o.Premium) {
		toSerialize["premium"] = o.Premium
	}
	if !IsNil(o.Summit) {
		toSerialize["summit"] = o.Summit
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.FollowerCount) {
		toSerialize["follower_count"] = o.FollowerCount
	}
	if !IsNil(o.FriendCount) {
		toSerialize["friend_count"] = o.FriendCount
	}
	if !IsNil(o.MeasurementPreference) {
		toSerialize["measurement_preference"] = o.MeasurementPreference
	}
	if !IsNil(o.Ftp) {
		toSerialize["ftp"] = o.Ftp
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.Clubs) {
		toSerialize["clubs"] = o.Clubs
	}
	if !IsNil(o.Bikes) {
		toSerialize["bikes"] = o.Bikes
	}
	if !IsNil(o.Shoes) {
		toSerialize["shoes"] = o.Shoes
	}
	return toSerialize, nil
}

type NullableDetailedAthlete struct {
	value *DetailedAthlete
	isSet bool
}

func (v NullableDetailedAthlete) Get() *DetailedAthlete {
	return v.value
}

func (v *NullableDetailedAthlete) Set(val *DetailedAthlete) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedAthlete) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedAthlete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedAthlete(val *DetailedAthlete) *NullableDetailedAthlete {
	return &NullableDetailedAthlete{value: val, isSet: true}
}

func (v NullableDetailedAthlete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedAthlete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


