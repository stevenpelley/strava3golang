/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the StreamSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSet{}

// StreamSet struct for StreamSet
type StreamSet struct {
	Time *TimeStream `json:"time,omitempty"`
	Distance *DistanceStream `json:"distance,omitempty"`
	Latlng *LatLngStream `json:"latlng,omitempty"`
	Altitude *AltitudeStream `json:"altitude,omitempty"`
	VelocitySmooth *SmoothVelocityStream `json:"velocity_smooth,omitempty"`
	Heartrate *HeartrateStream `json:"heartrate,omitempty"`
	Cadence *CadenceStream `json:"cadence,omitempty"`
	Watts *PowerStream `json:"watts,omitempty"`
	Temp *TemperatureStream `json:"temp,omitempty"`
	Moving *MovingStream `json:"moving,omitempty"`
	GradeSmooth *SmoothGradeStream `json:"grade_smooth,omitempty"`
}

// NewStreamSet instantiates a new StreamSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSet() *StreamSet {
	this := StreamSet{}
	return &this
}

// NewStreamSetWithDefaults instantiates a new StreamSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSetWithDefaults() *StreamSet {
	this := StreamSet{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *StreamSet) GetTime() TimeStream {
	if o == nil || IsNil(o.Time) {
		var ret TimeStream
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetTimeOk() (*TimeStream, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *StreamSet) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given TimeStream and assigns it to the Time field.
func (o *StreamSet) SetTime(v TimeStream) {
	o.Time = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *StreamSet) GetDistance() DistanceStream {
	if o == nil || IsNil(o.Distance) {
		var ret DistanceStream
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetDistanceOk() (*DistanceStream, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *StreamSet) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given DistanceStream and assigns it to the Distance field.
func (o *StreamSet) SetDistance(v DistanceStream) {
	o.Distance = &v
}

// GetLatlng returns the Latlng field value if set, zero value otherwise.
func (o *StreamSet) GetLatlng() LatLngStream {
	if o == nil || IsNil(o.Latlng) {
		var ret LatLngStream
		return ret
	}
	return *o.Latlng
}

// GetLatlngOk returns a tuple with the Latlng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetLatlngOk() (*LatLngStream, bool) {
	if o == nil || IsNil(o.Latlng) {
		return nil, false
	}
	return o.Latlng, true
}

// HasLatlng returns a boolean if a field has been set.
func (o *StreamSet) HasLatlng() bool {
	if o != nil && !IsNil(o.Latlng) {
		return true
	}

	return false
}

// SetLatlng gets a reference to the given LatLngStream and assigns it to the Latlng field.
func (o *StreamSet) SetLatlng(v LatLngStream) {
	o.Latlng = &v
}

// GetAltitude returns the Altitude field value if set, zero value otherwise.
func (o *StreamSet) GetAltitude() AltitudeStream {
	if o == nil || IsNil(o.Altitude) {
		var ret AltitudeStream
		return ret
	}
	return *o.Altitude
}

// GetAltitudeOk returns a tuple with the Altitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetAltitudeOk() (*AltitudeStream, bool) {
	if o == nil || IsNil(o.Altitude) {
		return nil, false
	}
	return o.Altitude, true
}

// HasAltitude returns a boolean if a field has been set.
func (o *StreamSet) HasAltitude() bool {
	if o != nil && !IsNil(o.Altitude) {
		return true
	}

	return false
}

// SetAltitude gets a reference to the given AltitudeStream and assigns it to the Altitude field.
func (o *StreamSet) SetAltitude(v AltitudeStream) {
	o.Altitude = &v
}

// GetVelocitySmooth returns the VelocitySmooth field value if set, zero value otherwise.
func (o *StreamSet) GetVelocitySmooth() SmoothVelocityStream {
	if o == nil || IsNil(o.VelocitySmooth) {
		var ret SmoothVelocityStream
		return ret
	}
	return *o.VelocitySmooth
}

// GetVelocitySmoothOk returns a tuple with the VelocitySmooth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetVelocitySmoothOk() (*SmoothVelocityStream, bool) {
	if o == nil || IsNil(o.VelocitySmooth) {
		return nil, false
	}
	return o.VelocitySmooth, true
}

// HasVelocitySmooth returns a boolean if a field has been set.
func (o *StreamSet) HasVelocitySmooth() bool {
	if o != nil && !IsNil(o.VelocitySmooth) {
		return true
	}

	return false
}

// SetVelocitySmooth gets a reference to the given SmoothVelocityStream and assigns it to the VelocitySmooth field.
func (o *StreamSet) SetVelocitySmooth(v SmoothVelocityStream) {
	o.VelocitySmooth = &v
}

// GetHeartrate returns the Heartrate field value if set, zero value otherwise.
func (o *StreamSet) GetHeartrate() HeartrateStream {
	if o == nil || IsNil(o.Heartrate) {
		var ret HeartrateStream
		return ret
	}
	return *o.Heartrate
}

// GetHeartrateOk returns a tuple with the Heartrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetHeartrateOk() (*HeartrateStream, bool) {
	if o == nil || IsNil(o.Heartrate) {
		return nil, false
	}
	return o.Heartrate, true
}

// HasHeartrate returns a boolean if a field has been set.
func (o *StreamSet) HasHeartrate() bool {
	if o != nil && !IsNil(o.Heartrate) {
		return true
	}

	return false
}

// SetHeartrate gets a reference to the given HeartrateStream and assigns it to the Heartrate field.
func (o *StreamSet) SetHeartrate(v HeartrateStream) {
	o.Heartrate = &v
}

// GetCadence returns the Cadence field value if set, zero value otherwise.
func (o *StreamSet) GetCadence() CadenceStream {
	if o == nil || IsNil(o.Cadence) {
		var ret CadenceStream
		return ret
	}
	return *o.Cadence
}

// GetCadenceOk returns a tuple with the Cadence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetCadenceOk() (*CadenceStream, bool) {
	if o == nil || IsNil(o.Cadence) {
		return nil, false
	}
	return o.Cadence, true
}

// HasCadence returns a boolean if a field has been set.
func (o *StreamSet) HasCadence() bool {
	if o != nil && !IsNil(o.Cadence) {
		return true
	}

	return false
}

// SetCadence gets a reference to the given CadenceStream and assigns it to the Cadence field.
func (o *StreamSet) SetCadence(v CadenceStream) {
	o.Cadence = &v
}

// GetWatts returns the Watts field value if set, zero value otherwise.
func (o *StreamSet) GetWatts() PowerStream {
	if o == nil || IsNil(o.Watts) {
		var ret PowerStream
		return ret
	}
	return *o.Watts
}

// GetWattsOk returns a tuple with the Watts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetWattsOk() (*PowerStream, bool) {
	if o == nil || IsNil(o.Watts) {
		return nil, false
	}
	return o.Watts, true
}

// HasWatts returns a boolean if a field has been set.
func (o *StreamSet) HasWatts() bool {
	if o != nil && !IsNil(o.Watts) {
		return true
	}

	return false
}

// SetWatts gets a reference to the given PowerStream and assigns it to the Watts field.
func (o *StreamSet) SetWatts(v PowerStream) {
	o.Watts = &v
}

// GetTemp returns the Temp field value if set, zero value otherwise.
func (o *StreamSet) GetTemp() TemperatureStream {
	if o == nil || IsNil(o.Temp) {
		var ret TemperatureStream
		return ret
	}
	return *o.Temp
}

// GetTempOk returns a tuple with the Temp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetTempOk() (*TemperatureStream, bool) {
	if o == nil || IsNil(o.Temp) {
		return nil, false
	}
	return o.Temp, true
}

// HasTemp returns a boolean if a field has been set.
func (o *StreamSet) HasTemp() bool {
	if o != nil && !IsNil(o.Temp) {
		return true
	}

	return false
}

// SetTemp gets a reference to the given TemperatureStream and assigns it to the Temp field.
func (o *StreamSet) SetTemp(v TemperatureStream) {
	o.Temp = &v
}

// GetMoving returns the Moving field value if set, zero value otherwise.
func (o *StreamSet) GetMoving() MovingStream {
	if o == nil || IsNil(o.Moving) {
		var ret MovingStream
		return ret
	}
	return *o.Moving
}

// GetMovingOk returns a tuple with the Moving field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetMovingOk() (*MovingStream, bool) {
	if o == nil || IsNil(o.Moving) {
		return nil, false
	}
	return o.Moving, true
}

// HasMoving returns a boolean if a field has been set.
func (o *StreamSet) HasMoving() bool {
	if o != nil && !IsNil(o.Moving) {
		return true
	}

	return false
}

// SetMoving gets a reference to the given MovingStream and assigns it to the Moving field.
func (o *StreamSet) SetMoving(v MovingStream) {
	o.Moving = &v
}

// GetGradeSmooth returns the GradeSmooth field value if set, zero value otherwise.
func (o *StreamSet) GetGradeSmooth() SmoothGradeStream {
	if o == nil || IsNil(o.GradeSmooth) {
		var ret SmoothGradeStream
		return ret
	}
	return *o.GradeSmooth
}

// GetGradeSmoothOk returns a tuple with the GradeSmooth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamSet) GetGradeSmoothOk() (*SmoothGradeStream, bool) {
	if o == nil || IsNil(o.GradeSmooth) {
		return nil, false
	}
	return o.GradeSmooth, true
}

// HasGradeSmooth returns a boolean if a field has been set.
func (o *StreamSet) HasGradeSmooth() bool {
	if o != nil && !IsNil(o.GradeSmooth) {
		return true
	}

	return false
}

// SetGradeSmooth gets a reference to the given SmoothGradeStream and assigns it to the GradeSmooth field.
func (o *StreamSet) SetGradeSmooth(v SmoothGradeStream) {
	o.GradeSmooth = &v
}

func (o StreamSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Latlng) {
		toSerialize["latlng"] = o.Latlng
	}
	if !IsNil(o.Altitude) {
		toSerialize["altitude"] = o.Altitude
	}
	if !IsNil(o.VelocitySmooth) {
		toSerialize["velocity_smooth"] = o.VelocitySmooth
	}
	if !IsNil(o.Heartrate) {
		toSerialize["heartrate"] = o.Heartrate
	}
	if !IsNil(o.Cadence) {
		toSerialize["cadence"] = o.Cadence
	}
	if !IsNil(o.Watts) {
		toSerialize["watts"] = o.Watts
	}
	if !IsNil(o.Temp) {
		toSerialize["temp"] = o.Temp
	}
	if !IsNil(o.Moving) {
		toSerialize["moving"] = o.Moving
	}
	if !IsNil(o.GradeSmooth) {
		toSerialize["grade_smooth"] = o.GradeSmooth
	}
	return toSerialize, nil
}

type NullableStreamSet struct {
	value *StreamSet
	isSet bool
}

func (v NullableStreamSet) Get() *StreamSet {
	return v.value
}

func (v *NullableStreamSet) Set(val *StreamSet) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSet) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSet(val *StreamSet) *NullableStreamSet {
	return &NullableStreamSet{value: val, isSet: true}
}

func (v NullableStreamSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


