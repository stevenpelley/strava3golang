/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the SummarySegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SummarySegment{}

// SummarySegment struct for SummarySegment
type SummarySegment struct {
	// The unique identifier of this segment
	Id *int64 `json:"id,omitempty"`
	// The name of this segment
	Name *string `json:"name,omitempty"`
	ActivityType *string `json:"activity_type,omitempty"`
	// The segment's distance, in meters
	Distance *float32 `json:"distance,omitempty"`
	// The segment's average grade, in percents
	AverageGrade *float32 `json:"average_grade,omitempty"`
	// The segments's maximum grade, in percents
	MaximumGrade *float32 `json:"maximum_grade,omitempty"`
	// The segments's highest elevation, in meters
	ElevationHigh *float32 `json:"elevation_high,omitempty"`
	// The segments's lowest elevation, in meters
	ElevationLow *float32 `json:"elevation_low,omitempty"`
	// A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
	StartLatlng []float32 `json:"start_latlng,omitempty"`
	// A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
	EndLatlng []float32 `json:"end_latlng,omitempty"`
	// The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.
	ClimbCategory *int32 `json:"climb_category,omitempty"`
	// The segments's city.
	City *string `json:"city,omitempty"`
	// The segments's state or geographical region.
	State *string `json:"state,omitempty"`
	// The segment's country.
	Country *string `json:"country,omitempty"`
	// Whether this segment is private.
	Private *bool `json:"private,omitempty"`
	AthletePrEffort *SummaryPRSegmentEffort `json:"athlete_pr_effort,omitempty"`
	AthleteSegmentStats *SummarySegmentEffort `json:"athlete_segment_stats,omitempty"`
}

// NewSummarySegment instantiates a new SummarySegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummarySegment() *SummarySegment {
	this := SummarySegment{}
	return &this
}

// NewSummarySegmentWithDefaults instantiates a new SummarySegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummarySegmentWithDefaults() *SummarySegment {
	this := SummarySegment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SummarySegment) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SummarySegment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SummarySegment) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SummarySegment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SummarySegment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SummarySegment) SetName(v string) {
	o.Name = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *SummarySegment) GetActivityType() string {
	if o == nil || IsNil(o.ActivityType) {
		var ret string
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetActivityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityType) {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *SummarySegment) HasActivityType() bool {
	if o != nil && !IsNil(o.ActivityType) {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given string and assigns it to the ActivityType field.
func (o *SummarySegment) SetActivityType(v string) {
	o.ActivityType = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *SummarySegment) GetDistance() float32 {
	if o == nil || IsNil(o.Distance) {
		var ret float32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetDistanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *SummarySegment) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float32 and assigns it to the Distance field.
func (o *SummarySegment) SetDistance(v float32) {
	o.Distance = &v
}

// GetAverageGrade returns the AverageGrade field value if set, zero value otherwise.
func (o *SummarySegment) GetAverageGrade() float32 {
	if o == nil || IsNil(o.AverageGrade) {
		var ret float32
		return ret
	}
	return *o.AverageGrade
}

// GetAverageGradeOk returns a tuple with the AverageGrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetAverageGradeOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageGrade) {
		return nil, false
	}
	return o.AverageGrade, true
}

// HasAverageGrade returns a boolean if a field has been set.
func (o *SummarySegment) HasAverageGrade() bool {
	if o != nil && !IsNil(o.AverageGrade) {
		return true
	}

	return false
}

// SetAverageGrade gets a reference to the given float32 and assigns it to the AverageGrade field.
func (o *SummarySegment) SetAverageGrade(v float32) {
	o.AverageGrade = &v
}

// GetMaximumGrade returns the MaximumGrade field value if set, zero value otherwise.
func (o *SummarySegment) GetMaximumGrade() float32 {
	if o == nil || IsNil(o.MaximumGrade) {
		var ret float32
		return ret
	}
	return *o.MaximumGrade
}

// GetMaximumGradeOk returns a tuple with the MaximumGrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetMaximumGradeOk() (*float32, bool) {
	if o == nil || IsNil(o.MaximumGrade) {
		return nil, false
	}
	return o.MaximumGrade, true
}

// HasMaximumGrade returns a boolean if a field has been set.
func (o *SummarySegment) HasMaximumGrade() bool {
	if o != nil && !IsNil(o.MaximumGrade) {
		return true
	}

	return false
}

// SetMaximumGrade gets a reference to the given float32 and assigns it to the MaximumGrade field.
func (o *SummarySegment) SetMaximumGrade(v float32) {
	o.MaximumGrade = &v
}

// GetElevationHigh returns the ElevationHigh field value if set, zero value otherwise.
func (o *SummarySegment) GetElevationHigh() float32 {
	if o == nil || IsNil(o.ElevationHigh) {
		var ret float32
		return ret
	}
	return *o.ElevationHigh
}

// GetElevationHighOk returns a tuple with the ElevationHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetElevationHighOk() (*float32, bool) {
	if o == nil || IsNil(o.ElevationHigh) {
		return nil, false
	}
	return o.ElevationHigh, true
}

// HasElevationHigh returns a boolean if a field has been set.
func (o *SummarySegment) HasElevationHigh() bool {
	if o != nil && !IsNil(o.ElevationHigh) {
		return true
	}

	return false
}

// SetElevationHigh gets a reference to the given float32 and assigns it to the ElevationHigh field.
func (o *SummarySegment) SetElevationHigh(v float32) {
	o.ElevationHigh = &v
}

// GetElevationLow returns the ElevationLow field value if set, zero value otherwise.
func (o *SummarySegment) GetElevationLow() float32 {
	if o == nil || IsNil(o.ElevationLow) {
		var ret float32
		return ret
	}
	return *o.ElevationLow
}

// GetElevationLowOk returns a tuple with the ElevationLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetElevationLowOk() (*float32, bool) {
	if o == nil || IsNil(o.ElevationLow) {
		return nil, false
	}
	return o.ElevationLow, true
}

// HasElevationLow returns a boolean if a field has been set.
func (o *SummarySegment) HasElevationLow() bool {
	if o != nil && !IsNil(o.ElevationLow) {
		return true
	}

	return false
}

// SetElevationLow gets a reference to the given float32 and assigns it to the ElevationLow field.
func (o *SummarySegment) SetElevationLow(v float32) {
	o.ElevationLow = &v
}

// GetStartLatlng returns the StartLatlng field value if set, zero value otherwise.
func (o *SummarySegment) GetStartLatlng() []float32 {
	if o == nil || IsNil(o.StartLatlng) {
		var ret []float32
		return ret
	}
	return o.StartLatlng
}

// GetStartLatlngOk returns a tuple with the StartLatlng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetStartLatlngOk() ([]float32, bool) {
	if o == nil || IsNil(o.StartLatlng) {
		return nil, false
	}
	return o.StartLatlng, true
}

// HasStartLatlng returns a boolean if a field has been set.
func (o *SummarySegment) HasStartLatlng() bool {
	if o != nil && !IsNil(o.StartLatlng) {
		return true
	}

	return false
}

// SetStartLatlng gets a reference to the given []float32 and assigns it to the StartLatlng field.
func (o *SummarySegment) SetStartLatlng(v []float32) {
	o.StartLatlng = v
}

// GetEndLatlng returns the EndLatlng field value if set, zero value otherwise.
func (o *SummarySegment) GetEndLatlng() []float32 {
	if o == nil || IsNil(o.EndLatlng) {
		var ret []float32
		return ret
	}
	return o.EndLatlng
}

// GetEndLatlngOk returns a tuple with the EndLatlng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetEndLatlngOk() ([]float32, bool) {
	if o == nil || IsNil(o.EndLatlng) {
		return nil, false
	}
	return o.EndLatlng, true
}

// HasEndLatlng returns a boolean if a field has been set.
func (o *SummarySegment) HasEndLatlng() bool {
	if o != nil && !IsNil(o.EndLatlng) {
		return true
	}

	return false
}

// SetEndLatlng gets a reference to the given []float32 and assigns it to the EndLatlng field.
func (o *SummarySegment) SetEndLatlng(v []float32) {
	o.EndLatlng = v
}

// GetClimbCategory returns the ClimbCategory field value if set, zero value otherwise.
func (o *SummarySegment) GetClimbCategory() int32 {
	if o == nil || IsNil(o.ClimbCategory) {
		var ret int32
		return ret
	}
	return *o.ClimbCategory
}

// GetClimbCategoryOk returns a tuple with the ClimbCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetClimbCategoryOk() (*int32, bool) {
	if o == nil || IsNil(o.ClimbCategory) {
		return nil, false
	}
	return o.ClimbCategory, true
}

// HasClimbCategory returns a boolean if a field has been set.
func (o *SummarySegment) HasClimbCategory() bool {
	if o != nil && !IsNil(o.ClimbCategory) {
		return true
	}

	return false
}

// SetClimbCategory gets a reference to the given int32 and assigns it to the ClimbCategory field.
func (o *SummarySegment) SetClimbCategory(v int32) {
	o.ClimbCategory = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *SummarySegment) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *SummarySegment) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *SummarySegment) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SummarySegment) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SummarySegment) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SummarySegment) SetState(v string) {
	o.State = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SummarySegment) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SummarySegment) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *SummarySegment) SetCountry(v string) {
	o.Country = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *SummarySegment) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *SummarySegment) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *SummarySegment) SetPrivate(v bool) {
	o.Private = &v
}

// GetAthletePrEffort returns the AthletePrEffort field value if set, zero value otherwise.
func (o *SummarySegment) GetAthletePrEffort() SummaryPRSegmentEffort {
	if o == nil || IsNil(o.AthletePrEffort) {
		var ret SummaryPRSegmentEffort
		return ret
	}
	return *o.AthletePrEffort
}

// GetAthletePrEffortOk returns a tuple with the AthletePrEffort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetAthletePrEffortOk() (*SummaryPRSegmentEffort, bool) {
	if o == nil || IsNil(o.AthletePrEffort) {
		return nil, false
	}
	return o.AthletePrEffort, true
}

// HasAthletePrEffort returns a boolean if a field has been set.
func (o *SummarySegment) HasAthletePrEffort() bool {
	if o != nil && !IsNil(o.AthletePrEffort) {
		return true
	}

	return false
}

// SetAthletePrEffort gets a reference to the given SummaryPRSegmentEffort and assigns it to the AthletePrEffort field.
func (o *SummarySegment) SetAthletePrEffort(v SummaryPRSegmentEffort) {
	o.AthletePrEffort = &v
}

// GetAthleteSegmentStats returns the AthleteSegmentStats field value if set, zero value otherwise.
func (o *SummarySegment) GetAthleteSegmentStats() SummarySegmentEffort {
	if o == nil || IsNil(o.AthleteSegmentStats) {
		var ret SummarySegmentEffort
		return ret
	}
	return *o.AthleteSegmentStats
}

// GetAthleteSegmentStatsOk returns a tuple with the AthleteSegmentStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySegment) GetAthleteSegmentStatsOk() (*SummarySegmentEffort, bool) {
	if o == nil || IsNil(o.AthleteSegmentStats) {
		return nil, false
	}
	return o.AthleteSegmentStats, true
}

// HasAthleteSegmentStats returns a boolean if a field has been set.
func (o *SummarySegment) HasAthleteSegmentStats() bool {
	if o != nil && !IsNil(o.AthleteSegmentStats) {
		return true
	}

	return false
}

// SetAthleteSegmentStats gets a reference to the given SummarySegmentEffort and assigns it to the AthleteSegmentStats field.
func (o *SummarySegment) SetAthleteSegmentStats(v SummarySegmentEffort) {
	o.AthleteSegmentStats = &v
}

func (o SummarySegment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SummarySegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ActivityType) {
		toSerialize["activity_type"] = o.ActivityType
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.AverageGrade) {
		toSerialize["average_grade"] = o.AverageGrade
	}
	if !IsNil(o.MaximumGrade) {
		toSerialize["maximum_grade"] = o.MaximumGrade
	}
	if !IsNil(o.ElevationHigh) {
		toSerialize["elevation_high"] = o.ElevationHigh
	}
	if !IsNil(o.ElevationLow) {
		toSerialize["elevation_low"] = o.ElevationLow
	}
	if !IsNil(o.StartLatlng) {
		toSerialize["start_latlng"] = o.StartLatlng
	}
	if !IsNil(o.EndLatlng) {
		toSerialize["end_latlng"] = o.EndLatlng
	}
	if !IsNil(o.ClimbCategory) {
		toSerialize["climb_category"] = o.ClimbCategory
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.AthletePrEffort) {
		toSerialize["athlete_pr_effort"] = o.AthletePrEffort
	}
	if !IsNil(o.AthleteSegmentStats) {
		toSerialize["athlete_segment_stats"] = o.AthleteSegmentStats
	}
	return toSerialize, nil
}

type NullableSummarySegment struct {
	value *SummarySegment
	isSet bool
}

func (v NullableSummarySegment) Get() *SummarySegment {
	return v.value
}

func (v *NullableSummarySegment) Set(val *SummarySegment) {
	v.value = val
	v.isSet = true
}

func (v NullableSummarySegment) IsSet() bool {
	return v.isSet
}

func (v *NullableSummarySegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummarySegment(val *SummarySegment) *NullableSummarySegment {
	return &NullableSummarySegment{value: val, isSet: true}
}

func (v NullableSummarySegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummarySegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


