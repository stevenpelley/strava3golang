/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava3golang

import (
	"encoding/json"
)

// checks if the HeartRateZoneRanges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeartRateZoneRanges{}

// HeartRateZoneRanges struct for HeartRateZoneRanges
type HeartRateZoneRanges struct {
	// Whether the athlete has set their own custom heart rate zones
	CustomZones *bool `json:"custom_zones,omitempty"`
	Zones []ZoneRange `json:"zones,omitempty"`
}

// NewHeartRateZoneRanges instantiates a new HeartRateZoneRanges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeartRateZoneRanges() *HeartRateZoneRanges {
	this := HeartRateZoneRanges{}
	return &this
}

// NewHeartRateZoneRangesWithDefaults instantiates a new HeartRateZoneRanges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeartRateZoneRangesWithDefaults() *HeartRateZoneRanges {
	this := HeartRateZoneRanges{}
	return &this
}

// GetCustomZones returns the CustomZones field value if set, zero value otherwise.
func (o *HeartRateZoneRanges) GetCustomZones() bool {
	if o == nil || IsNil(o.CustomZones) {
		var ret bool
		return ret
	}
	return *o.CustomZones
}

// GetCustomZonesOk returns a tuple with the CustomZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeartRateZoneRanges) GetCustomZonesOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomZones) {
		return nil, false
	}
	return o.CustomZones, true
}

// HasCustomZones returns a boolean if a field has been set.
func (o *HeartRateZoneRanges) HasCustomZones() bool {
	if o != nil && !IsNil(o.CustomZones) {
		return true
	}

	return false
}

// SetCustomZones gets a reference to the given bool and assigns it to the CustomZones field.
func (o *HeartRateZoneRanges) SetCustomZones(v bool) {
	o.CustomZones = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *HeartRateZoneRanges) GetZones() []ZoneRange {
	if o == nil || IsNil(o.Zones) {
		var ret []ZoneRange
		return ret
	}
	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeartRateZoneRanges) GetZonesOk() ([]ZoneRange, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *HeartRateZoneRanges) HasZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given []ZoneRange and assigns it to the Zones field.
func (o *HeartRateZoneRanges) SetZones(v []ZoneRange) {
	o.Zones = v
}

func (o HeartRateZoneRanges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeartRateZoneRanges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomZones) {
		toSerialize["custom_zones"] = o.CustomZones
	}
	if !IsNil(o.Zones) {
		toSerialize["zones"] = o.Zones
	}
	return toSerialize, nil
}

type NullableHeartRateZoneRanges struct {
	value *HeartRateZoneRanges
	isSet bool
}

func (v NullableHeartRateZoneRanges) Get() *HeartRateZoneRanges {
	return v.value
}

func (v *NullableHeartRateZoneRanges) Set(val *HeartRateZoneRanges) {
	v.value = val
	v.isSet = true
}

func (v NullableHeartRateZoneRanges) IsSet() bool {
	return v.isSet
}

func (v *NullableHeartRateZoneRanges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeartRateZoneRanges(val *HeartRateZoneRanges) *NullableHeartRateZoneRanges {
	return &NullableHeartRateZoneRanges{value: val, isSet: true}
}

func (v NullableHeartRateZoneRanges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeartRateZoneRanges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


